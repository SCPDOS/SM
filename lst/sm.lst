     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  %include "./src/inc/sm.inc"
     1                              <1> ;Structures and equates for DOSMGR
     2                              <1> 
     3                              <1> SM_SESSION  equ 0       ;Session number for Session Manager
     4                              <1> MAX_TASK    equ 32      ;Maximum of 32 tasks (0-31)
     5                              <1> MAX_SCHED   equ 31      ;Maximum Schedule number (31)
     6                              <1> 
     7                              <1> ;Critical Lock
     8                              <1> struc critLock
     9 00000000 ????????            <1>     .dCount     dd ?    ;When this is zero, the lock is free
    10 00000004 ????????????????    <1>     .pOwnerPcb  dq ?    ;Ptr to the owner of the lock!
    11                              <1> endstruc
    12                              <1> 
    13                              <1> ;System Object Table header
    14                              <1> struc soth  
    15 00000000 ????????????????    <1>     .pNextSoth  dq ?    ;Ptr to the next soth (-1 means end of chain)
    16 00000008 ????????            <1>     .dNumEntry  dd ?    ;Number of entries in this SOTH
    17 0000000C ????                <1>     .wObjType   dw ?    ;Type of object stored in the table
    18 0000000E ????                <1>     .wObjectSz  dw ?    ;Size of the objects stored in this table
    19                              <1> endstruc
    20                              <1> 
    21                              <1> OBJ_HDL     equ 0   ;A handle table header
    22                              <1> OBJ_PCB     equ 1   ;A PCB table header
    23                              <1> OBJ_PTDA    equ 2   ;A PTDA table header
    24                              <1> 
    25                              <1> ;Schedule head, used to protect the schedules from multiple processors 
    26                              <1> ; simultaneously modifying the list in a multiprocessor system.
    27                              <1> struc schedHead
    28 00000000 ??                  <1>     .bLock      db ?    ;Set if this schedule is locked (no writes)
    29 00000001 ????????            <1>     .dNumEntry  dd ?    ;Number of entries in this schedule
    30 00000005 ????????????????    <1>     .pSchedHead dq ?    ;Ptr to next ptda in schedule to be executed
    31 0000000D ????????????????    <1>     .pSchedTail dq ?    ;Ptr to last ptda in schedule
    32                              <1> endstruc
    33                              <1> 
    34                              <1> 
    35                              <1> 
    36                              <1> ;Per-task (thread) data area, keeps task (thread) state, including the 
    37                              <1> ; entries modified by the scheduler!
    38                              <1> struc ptda 
    39                              <1> ;The following variable IS ONLY touched by the scheduler.
    40                              <1> ;It is meaningless w/o a schedule lock!
    41 00000000 ????????????????    <1>     .pNSchdPtda dq ?   ;Points to the next ptda in the schedule
    42                              <1> ;Here begins the actual PTDA.
    43 00000008 ????????????????    <1>     .pPcb       dq ?    ;Ptr to the owning pcb (process)
    44 00000010 ????????????????    <1>     .pNProcPtda dq ?    ;Ptr to the next ptda owned by the process
    45 00000018 ????                <1>     .wFlags     dw ?    ;Flags for the Thread Control Block
    46                              <1> ;Sleep and Blocking States
    47 0000001A ????????????????    <1>     .pNSlepPtda dq ?    ;Ptr to the next ptda in the sleep chain
    48 00000022 ????????            <1>     .dSleepLen  dd ?    ;Sleep length in ~ms, 0 mean indefinite
    49 00000026 ????????            <1>     .dAwakeCode dd ?    ;Non-zero codes indicating why task was woken up
    50 0000002A ????????????????    <1>     .qEventId   dq ?    ;ID to check for block/run calls.
    51                              <1> ;Register storage
    52 00000032 ????????????????    <1>     .qRSP       dq ?    ;RSP on task switch
    53 0000003A <res 80h>           <1>     .sRegsTbl   dq 16 dup (?)   ;Register storage location
    54                              <1>     .boS:
    55                              <1>     ;alignb 16
    56                              <1>     ;.pFPUState  dq 512 dup (?)  ;Extended state storage
    57                              <1> endstruc
    58                              <1> 
    59                              <1> AWAKE_NORMAL        equ 0   ;Normal task awake code
    60                              <1> AWAKE_TIMEOUT       equ 1   ;Task was awoken by timeout
    61                              <1> AWAKE_INTER         equ 2   ;Task was interrupted
    62                              <1> AWAKE_STARVING      equ 3   ;Awoken by scheduler because system was starving
    63                              <1> 
    64                              <1> THREAD_ALIVE        equ 1   ;Set if thread alive.
    65                              <1> THREAD_DEAD         equ 2   ;Set if thread awaits reaping (a CWAIT call).
    66                              <1> THREAD_SLEEP        equ 4   ;Set if thread asleep.
    67                              <1> THREAD_LIGHT_SLEEP  equ 8   ;Set if thread can be awakened prematurely.
    68                              <1> 
    69                              <1> 
    70                              <1> ;Process control block, keeps full process state.
    71                              <1> ;Must be aligned in size to 16 bytes.
    72                              <1> struc pcb  
    73                              <1> ;Process metadata
    74 00000000 ????????            <1>     .hPcb       dd ?    ;Hdl to this pcb
    75 00000004 ????????            <1>     .hParPcb    dd ?    ;Handle to the parent pcb
    76 00000008 ????????            <1>     .dCsid      dd ?    ;CSID of this task chain (id of root program)
    77 0000000C ????????            <1>     .hScrnNum   dd ?    ;Handle to the session (byte number of the screen)
    78 00000010 ????                <1>     .wFlags     dw ?    ;Process flags
    79                              <1> ;PTDA block, refers to PTDA 0 for this process
    80 00000012 <res Eh>            <1>     alignb 10h
    81 00000020 <res BAh>           <1>     .sPtda      db ptda_size dup (?) ;Thread 0's PTDA
    82                              <1> ;Interrupt handles for replacing on task swap
    83 000000DA ????????????????    <1>     .pInt22h    dq ?    ;Int 22h handler on task switch
    84 000000E2 ????????????????    <1>     .pInt23h    dq ?    ;Int 23h handler on task switch
    85 000000EA ????????????????    <1>     .pInt24h    dq ?    ;Int 24h handler on task switch
    86 000000F2 ????????????????    <1>     .pInt2Eh    dq ?    ;Int 2Eh handler on task switch (for master CMD)
    87                              <1> ;Per-process DOS state
    88                              <1>     .sdaCopy:           ;Copy of the DOS sda for this session when not active
    89                              <1> endstruc
    90                              <1> 
    91                              <1> 
    92                              <1> ;Communication packet with MCON
    93                              <1> 
    94                              <1> struc mScrCap  
    95 00000000 ????                <1>     .wVer       dw ?    ;Upper byte, Major num (1). Lower byte, minor num (0)
    96 00000002 ????                <1>     .wLen       dw ?    ;Length of structure (13 bytes)
    97 00000004 ??                  <1>     .bScrNum    db ?    ;Number of screens supported by driver
    98 00000005 ????????????????    <1>     .pDevHlp    dq ?    ;Pointer to the devHlp help routine
    99                              <1> endstruc
   100                              <1> 
   101                              <1> magicCode equ 7100h ;Scancode/ASCII code of ALT+F10
   102                              <1> 
   103                              <1> DevHlp_ConsInputFilter  equ 5
   104                              <1> DevHlp_Signal_SM        equ 7
   105                              <1> DevHlp_ProcBlock        equ 9
   106                              <1> DevHlp_ProcRun          equ 10
   107                              <1> DevHlp_GetDOSVar        equ 16
   108                              <1> 
   109                              <1> 
   110                              <1> ;BIOS Equates go here
   111                              <1> EOI         equ 20h
   112                              <1> pic1cmd     equ 20h
   113                              <1> 
   114                              <1> PITbase     equ 40h
   115                              <1> PIT0        equ PITbase
   116                              <1> PIT1        equ PITbase + 1
   117                              <1> PIT2        equ PITbase + 2
   118                              <1> PITcmd      equ PITbase + 3
   119                              <1> 
   120                              <1> timerInt    equ 0F0h    ;Change if we change this in BIOS!!
     4                                  %include "./src/inc/dosStruc.inc"
     1                              <1> ;Structures and equates coming from DOS
     2                              <1> 
     3                              <1> ;Load program structure
     4                              <1> struc loadProg
     5 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
     6 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
     7 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
     8 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
     9 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    10 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    11                              <1> endstruc
    12                              <1> 
    13                              <1> ;Sysvars struct
    14                              <1> drvHdr_size equ 022h
    15                              <1> struc sysVars
    16 00000000 ????????????????    <1>     .dpbHeadPtr  dq ?    
    17 00000008 ????????????????    <1>     .sftHeadPtr  dq ?    
    18 00000010 ????????????????    <1>     .clockPtr    dq ?    
    19 00000018 ????????????????    <1>     .vConPtr     dq ?
    20 00000020 ????                <1>     .maxBytesSec dw ?    
    21 00000022 ????????????????    <1>     .bufHeadPtr  dq ?    
    22 0000002A ????????????????    <1>     .cdsHeadPtr  dq ?    
    23 00000032 ????????????????    <1>     .fcbsHeadPtr dq ?    
    24 0000003A ????                <1>     .numSafeSFCB dw ?    
    25 0000003C ??                  <1>     .numPhysVol  db ?    
    26 0000003D ??                  <1>     .lastdrvNum  db ?
    27 0000003E ??                  <1>     .numBuffers  db ?
    28 0000003F <res 22h>           <1>     .nulDevHdr   db drvHdr_size dup (?)
    29 00000061 ??                  <1>     .numJoinDrv  db ?    
    30 00000062 ??                  <1>     .numFiles    db ?   
    31                              <1> ; ---- dosMgrHooks and fun stuff ----
    32 00000063 ??                  <1>     .dosMgrPresent  db ?    ;Clear if no mgr, else set to -1
    33 00000064 ????????????????    <1>     .launchTask     dq ?    ;Registers a new task
    34 0000006C ????????????????    <1>     .terminateTask  dq ?    ;Called to tell the MGR that this task is ending
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc sda
    38                              <1> ;Only the fields that we care about are here. These live in the 
    39                              <1> ; "always swap" portion of the SDA
    40                              <1> ;We only really care about inDOS, errorLevel and currentPSP
    41 00000000 ??                  <1>     .critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
    42 00000001 ??                  <1>     .inDOS       db ?  ;Inc on each DOS call, dec when leaving x
    43 00000002 ??                  <1>     .errorDrv    db ?  ;Drive on which error occured or FFh x
    44 00000003 ??                  <1>     .errorLocus  db ?  ;Where the error took place  
    45 00000004 ????                <1>     .errorExCde  dw ?  ;Extended Error Code
    46 00000006 ??                  <1>     .errorAction db ?  ;Suggested action for error  
    47 00000007 ??                  <1>     .errorClass  db ?  ;Error Class
    48 00000008 ????????????????    <1>     .xInt24RDI   dq ?  ;Preserved rdi across a critical error
    49 00000010 ????????????????    <1>     .currentDTA  dq ?  ;Address of the current DTA x
    50 00000018 ????????????????    <1>     .currentPSP  dq ?  ;Address of current PSP x
    51                              <1> 
    52 00000020 ????????????????    <1>     .xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
    53 00000028 ????                <1>     .errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
    54                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
    55                              <1>     ;Lower byte: User Specified
    56 0000002A ??                  <1>     .currentDrv  db ?  ;Default drive x
    57 0000002B ??                  <1>     .breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
    58                              <1> endstruc
    59                              <1> 
    60                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
    61                              <1> struc psp
    62 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
    63 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
    64 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
    65 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
    66 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
    67 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
    68 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
    69                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
    70                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
    71                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
    72                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
    73                              <1> ; always used and jftSize.
    74                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
    75 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
    76 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
    77 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
    78 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
    79 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
    80 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
    81 0000005B ??                  <1>                 db ?  ;Reserved byte
    82                              <1> ;The below are in the same place as in DOS.
    83                              <1>     .cmdLineArgPtr: ;Symbol for future use
    84 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
    85 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
    86                              <1>     .dta:   ;Pointer to the default DTA in the PSP
    87 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
    88 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
    89                              <1> endstruc
    90                              <1> 
    91                              <1> struc callerFrame
    92 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
    93 00000008 ????????????????    <1>     .rbx    dq ?    
    94 00000010 ????????????????    <1>     .rcx    dq ?
    95 00000018 ????????????????    <1>     .rdx    dq ?
    96 00000020 ????????????????    <1>     .rsi    dq ?
    97 00000028 ????????????????    <1>     .rdi    dq ?
    98 00000030 ????????????????    <1>     .rbp    dq ?
    99 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   100 00000040 ????????????????    <1>     .r9     dq ?
   101                              <1> ;Pushed by Processor when invoked via Interrupt
   102 00000048 ????????????????    <1>     .rip    dq ?
   103 00000050 ????????????????    <1>     .cs     dq ?
   104 00000058 ????????????????    <1>     .flags  dq ?
   105 00000060 ????????????????    <1>     .rsp    dq ?
   106 00000068 ????????????????    <1>     .ss     dq ?
   107                              <1> endstruc
   108                              <1> 
   109                              <1> execLoadGo  equ 0
   110                              <1> execLoad    equ 1
   111                              <1> execInvld   equ 2
   112                              <1> execOverlay equ 3
   113                              <1> execBkgrnd  equ 4
   114                              <1> 
   115                              <1> struc execFrame
   116 00000000 ????????????????    <1>     .oldRBP     dq ?  
   117 00000008 ????????????????    <1>     .bSubFunc   dq ?  ;Subfunction number
   118 00000010 ????????????????    <1>     .wProgHdl   dq ?  ;File handle number for executable file
   119 00000018 ????????????????    <1>     .wNameLen   dq ?  ;Needs to be less than 64 but welp
   120 00000020 ????????????????    <1>     .pParam     dq ?  ;Parameter list pointer
   121 00000028 ????????????????    <1>     .pProgname  dq ?  ;Ptr to ASCIIZ program name
   122                              <1> 
   123 00000030 ????????????????    <1>     .pEnvBase   dq ?  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
   124 00000038 ????????????????    <1>     .pPSPBase   dq ?  ;Ptr to new PSP base address
   125 00000040 ????????????????    <1>     .pProgBase  dq ?  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
   126 00000048 ????????????????    <1>     .dProgSize  dq ?  ;Program size is saved here, PSP included.
   127 00000050 ????????????????    <1>     .dCOFFhdr   dq ?  ;Offset in file to COFF header. Set to 0 for COM
   128 00000058 ????????????????    <1>     .bSegCount  dq ?  ;Count of segments loaded into memory
   129 00000060 ????????????????    <1>     .wCOFFChars dq ?  ;Save the COFF characteristics in here
   130                              <1> .pProgEP:   ;Program EP, recycle this qword
   131 00000068 ????????????????    <1>     .wNumSeg    dq ?  ;Number of segments, consider reusing NameLen
   132 00000070 ????????????????    <1>     .dFilePtr   dq ?  ;Keep of track of where in file we are
   133 00000078 ????????????????    <1>     .qRelocVal  dq ?  ;Used when computing relocations, Rebasing factor
   134                              <1> endstruc
   135                              <1> 
   136                              <1> ;MISC ASCII control chars
   137                              <1> NUL equ 00h ;^@         | ASCII Null
   138                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
   139                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   140                              <1> BEL equ 07h ;^G         | ASCII Bell
   141                              <1> BSP equ 08h ;^H         | ASCII Backspace
   142                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   143                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   144                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   145                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   146                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   147                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   148                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   149                              <1> CMD equ 16h ;^V         | EDLIN COMMAND CHAR
   150                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   151                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   152                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   153                              <1> SPC equ 20h ;Printable  | ASCII Space
   154                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   155                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   156                              <1> 
   157                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   158                              <1> asciiMask   equ asciiCaret - 1  ;Turn into a bitmask
   159                              <1> 
   160                              <1> ;Extended Ascii Codes
   161                              <1> eF1     equ 3Bh ;F1 second byte
   162                              <1> eF2     equ 3Ch ;F2 second byte
   163                              <1> eF3     equ 3Dh ;F3 second byte
   164                              <1> eF4     equ 3Eh ;F4 second byte
   165                              <1> eF5     equ 3Fh ;F5 second byte
   166                              <1> eF6     equ 40h ;F6 second byte
   167                              <1> eF7     equ 41h ;F7 second byte
   168                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   169                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   170                              <1> eIns    equ 52h ;Insert second byte
   171                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     5                                  %include "./src/inc/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvStopCon      equ 20  ; NEW MULTITASKING 
    38                              <1>     drvRestartCon   equ 21  ; NEW MULTITASKING
    39                              <1>     drvGETDRVMAP    equ 23
    40                              <1>     drvSETDRVMAP    equ 24
    41                              <1>     
    42                              <1> ;Driver Error equates 
    43                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    44                              <1>     drvBadUnit      equ 1   ;Unknown unit
    45                              <1>     drvNotReady     equ 2   ;Device not ready
    46                              <1>     drvBadCmd       equ 3   ;Unknown command
    47                              <1>     drvCRCErr       equ 4   ;CRC Error
    48                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    49                              <1>     drvBadSeek      equ 6   ;Seek error
    50                              <1>     drvBadMed       equ 7   ;Unknown media
    51                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    52                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    53                              <1>     drvWriteFault   equ 10  ;Write Fault
    54                              <1>     drvReadFault    equ 11  ;Read Fault
    55                              <1>     drvGenFault     equ 12  ;General Fault
    56                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    57                              <1> 
    58                              <1> ;Driver status word status bit meanings
    59                              <1>     drvErrStatus    equ 8000h  
    60                              <1>     drvDonStatus    equ 0100h
    61                              <1>     drvBsyStatus    equ 0200h
    62                              <1> 
    63                              <1> ;Driver Attribute Word bit meanings
    64                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    65                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    66                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    67                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    68                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    69                              <1>     devDrvMulti    equ 20h ;Reserved, If set, device is multitasking. 
    70                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    71                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    72                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    73                              <1>     devDrvChar     equ 8000h ;If set, Char device
    74                              <1> ;Bit 0 1=console input
    75                              <1> ;    1 1=console output (character devices)
    76                              <1> ;    2 1=NUL device
    77                              <1> ;    3 1=CLOCK device
    78                              <1> ;    4 1=Int 29 output (CON)
    79                              <1> ;    5 1=Multitasking driver. Bit ignored by DOS. Used by multitaskers.
    80                              <1> ; If bit set, no crit2 lock placed on thread when making drv request.
    81                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    82                              <1> ;    7 1=Generic IOCTL function supported (19)
    83                              <1> ;   11 1=open/close/removable media supported (3.0+)
    84                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    85                              <1> ;      1=media descriptor in FAT required (block devices)
    86                              <1> ;   14 1=IOCTL R/W supported
    87                              <1> ;   15 0=block device
    88                              <1> ;      1=character device
    89                              <1> 
    90                              <1> ;Driver structures
    91                              <1> 
    92                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    93                              <1> 
    94                              <1>     .hdrlen db ?  ;Length of the request header
    95                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    96                              <1>     .cmdcde db ?  ;Command code
    97                              <1>     .status dw ?  ;Status word
    98                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    99                              <1> 
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> struc drvReqHdr
   103                              <1>     drvReqHdrM
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc initReqPkt  ;Init Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM   ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   109 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   110 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   111 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   112 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   113                              <1> 
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   119 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   120 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   121 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   122                              <1> 
   123                              <1> endstruc
   124                              <1> 
   125                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   126                              <1> 
   127                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   128 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   129 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   130 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   131                              <1> 
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioReqPkt   ;IO Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   137 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   138 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   139 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   140 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   141 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   148 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   149                              <1> 
   150                              <1> endstruc
   151                              <1> 
   152                              <1> struc statusReqPkt   ;Status Request Packet
   153                              <1> 
   154                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   155                              <1> 
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   159                              <1> 
   160                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   161                              <1>      
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc openReqPkt ;Open Device Request Packet
   165                              <1> 
   166                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   167                              <1>      
   168                              <1> endstruc
   169                              <1> 
   170                              <1> struc closeReqPkt ;Close Device Request Packet
   171                              <1> 
   172                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   173                              <1>      
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   177                              <1> 
   178                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   179                              <1>      
   180                              <1> endstruc
   181                              <1> 
   182                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   183                              <1> 
   184                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   185 0000000D ??                  <1>     .majfun db ?  ;Major function number
   186 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   187 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   188 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   189 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   194                              <1>     
   195                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   200                              <1>     
   201                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   202                              <1> 
   203                              <1> endstruc
   204                              <1> 
   205                              <1> 
   206                              <1> struc genioctlGetParamsTable
   207 00000000 ??                  <1>     .size           db ?
   208 00000001 ??????????????      <1>     .res            db 7 dup (?)
   209 00000008 ????????????????    <1>     .sectorSize     db 8 dup (?)  ;Only the lower dword is valid here
   210 00000010 ????????????????    <1>     .numSectors     db 8 dup (?)
   211                              <1> endstruc
   212                              <1> 
   213                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   214                              <1> struc genioctlLBAformat
   215 00000000 ??                  <1>     .size           db ?
   216 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   217 00000002 ????????????        <1>     .res            db 6 dup (?)
   218 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start format at
   219                              <1> endstruc
   220                              <1> 
   221                              <1> struc genioctlLBAwrite
   222 00000000 ??                  <1>     .size           db ?
   223 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   224 00000002 ????????????        <1>     .res            db 6 dup (?)
   225 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start write at
   226 00000010 ????????????????    <1>     .xferBuffer     db 8 dup (?)  ;Transfer buffer for data
   227                              <1> endstruc
     6                                  %include "./src/inc/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1>     ret
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> %macro cret 1
    17                              <1>     j%-1 short %%a
    18                              <1>     return
    19                              <1> %%a:
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> %macro retz 0
    23                              <1> cret z
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro retnz 0
    27                              <1> cret nz
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro rete 0
    31                              <1> cret e
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> %macro retne 0
    35                              <1> cret ne
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro retc 0
    39                              <1> cret c
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro retnc 0
    43                              <1> cret nc
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retb 0
    47                              <1> cret b
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnb 0
    51                              <1> cret nb
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro reta 0
    55                              <1> cret a
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retna 0
    59                              <1> cret na
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro breakpoint 0
    63                              <1> xchg bx, bx
    64                              <1> %endmacro
     7                                  
     8                                  Segment cseg code private align=16
     9                                  %include "./src/text/init.asm"
     1                              <1>     EXTERN bseg_start
     2                              <1>     EXTERN bseg_len
     3                              <1>     GLOBAL ep
     4                              <1> 
     5                              <1> ;Init code for Session Manager.
     6                              <1> ep:  ;Entry Point for SM
     7 00000000 B800300000          <1>     mov eax, 3000h  ;Get version number
     8 00000005 CD21                <1>     int 21h
     9 00000007 3C01                <1>     cmp al, 1   ;If the major number is 1 or below
    10 00000009 7615                <1>     jbe proceedBss
    11 0000000B 488D15(32000000)    <1>     lea rdx, bvStr
    12                              <1> exitBad:
    13                              <1> ;Bad exits in init jump here
    14 00000012 B800090000          <1>     mov eax, 0900h
    15 00000017 CD21                <1>     int 21h
    16 00000019 B8FF4C0000          <1>     mov eax, 4CFFh
    17 0000001E CD21                <1>     int 21h
    18                              <1> proceedBss:
    19                              <1> ;Clean the BSS
    20 00000020 488D3D(00000000)    <1>     lea rdi, bseg_start
    21 00000027 B9[00000000]        <1>     mov ecx, bseg_len
    22 0000002C 31C0                <1>     xor eax, eax
    23 0000002E F3AA                <1>     rep stosb
    24                              <1> ;Save the PSP pointer for the Session (DOS) Manager
    25 00000030 4C8905(00000000)    <1>     mov qword [pDosMgrPsp], r8
    26                              <1> ;Check that STDIO is not redirected from the standard console device.
    27                              <1> ;This can be an AUX driver, the test for MCON compliance occurs below!
    28                              <1> ;If it is, exit complaining!
    29 00000037 31DB                <1>     xor ebx, ebx    ;STDIN
    30 00000039 B800440000          <1>     mov eax, 4400h  ;Get Hdl info
    31 0000003E CD21                <1>     int 21h
    32 00000040 89D3                <1>     mov ebx, edx    ;Save the returned word in bx
    33 00000042 488D15(6C010000)    <1>     lea rdx, noIOCTLStr
    34 00000049 72C7                <1>     jc exitBad
    35 0000004B 488D15(8E010000)    <1>     lea rdx, noStdinStr
    36 00000052 81E381000000        <1>     and ebx, 81h    ;Save bits 7 and 0 (Char dev and STDIN device)
    37 00000058 81FB81000000        <1>     cmp ebx, 81h
    38 0000005E 75B2                <1>     jne exitBad
    39                              <1> 
    40 00000060 BB01000000          <1>     mov ebx, 1      ;STDOUT
    41 00000065 B800440000          <1>     mov eax, 4400h  ;Get Hdl info
    42 0000006A CD21                <1>     int 21h
    43 0000006C 89D3                <1>     mov ebx, edx    ;Save the returned word in bx
    44 0000006E 488D15(6C010000)    <1>     lea rdx, noIOCTLStr
    45 00000075 729B                <1>     jc exitBad
    46 00000077 488D15(BD010000)    <1>     lea rdx, noStdoutStr
    47 0000007E 81E382000000        <1>     and ebx, 82h    ;Save bits 7 and 1 (Char dev and STDOUT device)
    48 00000084 81FB82000000        <1>     cmp ebx, 82h
    49 0000008A 7586                <1>     jne exitBad
    50                              <1> ;XCHG ptrs with MCON, driver specific IOCTL call
    51 0000008C 31F6                <1>     xor esi, esi
    52 0000008E 31FF                <1>     xor edi, edi
    53 00000090 56                  <1>     push rsi        ;Push two 0's onto the stack to allocate struc on stack
    54 00000091 56                  <1>     push rsi
    55 00000092 4889E2              <1>     mov rdx, rsp    ;Allocated structure on the stack
    56 00000095 66C7020001          <1>     mov word [rdx + mScrCap.wVer], 0100h
    57 0000009A 66C742020D00        <1>     mov word [rdx + mScrCap.wLen], mScrCap_size
    58 000000A0 488D1D0C040000      <1>     lea rbx, devHlp
    59 000000A7 48895A05            <1>     mov qword [rdx + mScrCap.pDevHlp], rbx
    60 000000AB B80C440000          <1>     mov eax, 440Ch
    61 000000B0 31DB                <1>     xor ebx, ebx    ;CON handle (STDIN)!
    62 000000B2 B940030000          <1>     mov ecx, 0340h  ;CON + Reports capacities!
    63 000000B7 CD21                <1>     int 21h
    64 000000B9 730C                <1>     jnc mConOk
    65 000000BB 488D15(55000000)    <1>     lea rdx, noConStr
    66 000000C2 E94BFFFFFF          <1>     jmp exitBad
    67                              <1> mConOk:
    68 000000C7 0FB65A04            <1>     movzx ebx, byte [rdx + mScrCap.bScrNum]
    69 000000CB B808000000          <1>     mov eax, 8      ;Maximum supported, 8 screens
    70 000000D0 39C3                <1>     cmp ebx, eax
    71 000000D2 0F47D8              <1>     cmova ebx, eax  ;Maximum supported session number is 7
    72 000000D5 FFCB                <1>     dec ebx         ;Turn into an index
    73 000000D7 891D(28000000)      <1>     mov dword [dMaxSesIndx], ebx   ;Store the max session number index.
    74                              <1> ;Restore the stack now!
    75 000000DD 5E                  <1>     pop rsi  
    76 000000DE 5E                  <1>     pop rsi
    77 000000DF 85DB                <1>     test ebx, ebx   ;If only one session possible, fail to start!
    78 000000E1 750C                <1>     jnz screensOk    ;Else, we know we have enough screens to proceed usefully!
    79                              <1> ;If not enough screens, indicate we are aborting!
    80 000000E3 488D15(7A000000)    <1>     lea rdx, noScreenStr
    81 000000EA E923FFFFFF          <1>     jmp exitBad
    82                              <1> screensOk:
    83                              <1> ;Now we set the maximum number of tasks
    84 000000EF C705(24000000)2000- <1>     mov dword [dMaxTask], MAX_TASK
    84 000000F7 0000                <1>
    85                              <1> ;Get the size of the SDA to know how big a pcb actually is.
    86 000000F9 B8065D0000          <1>     mov eax, 5D06h
    87 000000FE CD21                <1>     int 21h
    88 00000100 488935(08000000)    <1>     mov qword [pDosSda], rsi
    89 00000107 890D(14000000)      <1>     mov dword [dSdaLen], ecx   
    90 0000010D 8915(10000000)      <1>     mov dword [dSdaLenMin], edx
    91 00000113 81C1FA000000        <1>     add ecx, pcb_size
    92                              <1> ;Round up the pcb size to a 16-byte boundary.
    93 00000119 81C10F000000        <1>     add ecx, 0Fh
    94 0000011F C1E904              <1>     shr ecx, 4
    95 00000122 C1E104              <1>     shl ecx, 4
    96 00000125 890D(20000000)      <1>     mov dword [dPcbLen], ecx   ;Save the max length of a pcb.
    97                              <1> ;Now lets allocate a soth for pcbs
    98 0000012B 89C8                <1>     mov eax, ecx    
    99 0000012D 8B1D(24000000)      <1>     mov ebx, dword [dMaxTask]   ;Get the maximum number of tasks
   100 00000133 F7E3                <1>     mul ebx     ;Multiply size of pcb with max number of tasks.
   101                              <1> 
   102 00000135 0510000000          <1>     add eax, soth_size  ;Add the SOTH header size too
   103 0000013A 050F000000          <1>     add eax, 0Fh    ;Round result up by a paragraph
   104 0000013F C1E804              <1>     shr eax, 4      ;Turn into number of paragraphs
   105 00000142 89C3                <1>     mov ebx, eax
   106 00000144 B800480000          <1>     mov eax, 4800h
   107 00000149 CD21                <1>     int 21h
   108 0000014B 7318                <1>     jnc spaceOk
   109 0000014D 488D15(9B000000)    <1>     lea rdx, noMemStr
   110                              <1> exitMcon:
   111 00000154 B80C440000          <1>     mov eax, 440Ch  ;Generic IOCTL
   112 00000159 B948030000          <1>     mov ecx, 0348h  ;Deinstall mtask capabilities from CON
   113 0000015E CD21                <1>     int 21h
   114 00000160 E9ADFEFFFF          <1>     jmp exitBad
   115                              <1> spaceOk:
   116 00000165 50                  <1>     push rax        ;Save the pointer to the allocated block!
   117 00000166 4889C7              <1>     mov rdi, rax    ;Clear the space we just allocated!
   118 00000169 C1E304              <1>     shl ebx, 4
   119 0000016C 89D9                <1>     mov ecx, ebx  ;Get the number of bytes we allocated
   120 0000016E 31C0                <1>     xor eax, eax
   121 00000170 F3AA                <1>     rep stosb
   122 00000172 5F                  <1>     pop rdi         ;Get back the allocated block pointer!
   123                              <1> ;Now setup the SOTH with the right flags!
   124 00000173 48C707FFFFFFFF      <1>     mov qword [rdi + soth.pNextSoth], -1    ;End of chain marker!
   125 0000017A 8B0D(24000000)      <1>     mov ecx, dword [dMaxTask]
   126 00000180 894F08              <1>     mov dword [rdi + soth.dNumEntry], ecx   ;This table saves all tasks.
   127 00000183 66C7470C0100        <1>     mov word [rdi + soth.wObjType], OBJ_PCB ;We use this for PCBs
   128 00000189 8B0D(20000000)      <1>     mov ecx, dword [dPcbLen]
   129 0000018F 66894F0E            <1>     mov word [rdi + soth.wObjectSz], cx     ;This is the object size
   130 00000193 48893D(61000000)    <1>     mov qword [pObjTblHdr], rdi ;Save the pointer to the first object table here
   131                              <1> ;Now set up the PCB Table information
   132 0000019A 48893D(18000000)    <1>     mov qword [pPcbTbl], rdi    ;Store ptr to the first pcb soth here
   133 000001A1 4881C710000000      <1>     add rdi, soth_size          ;Go to the first entry here
   134 000001A8 48893D(41000000)    <1>     mov qword [pCurPtda], rdi ;The session manager is the current task
   135 000001AF C705(3D000000)0000- <1>     mov dword [hCurPtda], SM_SESSION
   135 000001B7 0000                <1>
   136                              <1> ;Now copy the SDA over and the DOS state as things stand. rsi -> DOS SDA
   137 000001B9 488DBFFA000000      <1>     lea rdi, qword [rdi + pcb.sdaCopy]
   138 000001C0 8B0D(14000000)      <1>     mov ecx, dword [dSdaLen]
   139 000001C6 F3A4                <1>     rep movsb   ;Copy over the SDA as it stands now, in peacetime!
   140                              <1> 
   141                              <1> ;Now launch dMaxSesIndx copies of COMMAND.COM.
   142 000001C8 B800190000          <1>     mov eax, 1900h  ;Get in AL the current drive (0=A, ...)
   143 000001CD CD21                <1>     int 21h
   144 000001CF 0441                <1>     add al, "A"
   145 000001D1 8805(04000000)      <1>     mov byte [dfltShell], al    
   146 000001D7 8805(13000000)      <1>     mov byte [dfltShell2], al   ;Store on the backup shell too
   147 000001DD 31C9                <1>     xor ecx, ecx    ;Default search attributes
   148 000001DF 488D15(04000000)    <1>     lea rdx, dfltShell
   149 000001E6 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   150 000001EB CD21                <1>     int 21h
   151 000001ED 731C                <1>     jnc .shellFnd
   152 000001EF 488D15(13000000)    <1>     lea rdx, dfltShell2
   153 000001F6 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   154 000001FB CD21                <1>     int 21h
   155 000001FD 730C                <1>     jnc .shellFnd
   156 000001FF 488D15(D4000000)    <1>     lea rdx, noCmdStr
   157 00000206 E949FFFFFF          <1>     jmp exitMcon
   158                              <1> .shellFnd:
   159 0000020B 488915(2C000000)    <1>     mov qword [pCmdShell], rdx    ;Save the string to the program to spawn
   160                              <1> 
   161                              <1> ;Setup this Int 22h. If the COMMAND.COM of a session exits, then 
   162                              <1> ; this handler is executed. COMMAND.COM when loaded as /P will override 
   163                              <1> ; this in both the IDT and in its own PSP so this is very much for any
   164                              <1> ; early accidents. Eventually, will replace this with a routine that 
   165                              <1> ; tries to launch a new instance of the program specified in the sm.ini 
   166                              <1> ; config file.
   167 00000212 488D15BA090000      <1>     lea rdx, i22hHdlr   ;Install the tmp Int 22h handler!
   168 00000219 B822250000          <1>     mov eax, 2522h
   169 0000021E CD21                <1>     int 21h
   170                              <1> 
   171 00000220 488D15C7090000      <1>     lea rdx, interruptExit  
   172 00000227 B82E250000          <1>     mov eax, 252Eh  ;Eliminate any COMMAND.COM hook that might be present!
   173 0000022C CD21                <1>     int 21h
   174                              <1> 
   175                              <1> ;Now we spawn each task one by one.
   176                              <1> ;After each spawn, we copy the SDA into the pcb for that task.
   177                              <1> ;This way, each task has the right current psp, dta, drive and dos state.
   178                              <1> ;After each spawn, pull the rax value from the child stack, replacing
   179                              <1> ; it with the rip value to start program execution. 
   180                              <1> ;Place 0202h flags, PSPptr in r8 and r9 and rax in rax on the register stack.
   181                              <1> 
   182                              <1> ;Prepare the sda copy pointer
   183 0000022E B901000000          <1>     mov ecx, 1      ;Goto the first pcb 
   184 00000233 E887070000          <1>     call getPcbPtr  ;Get the ptr in rdi
   185                              <1> 
   186 00000238 4881EC30000000      <1>     sub rsp, loadProg_size  ;Make space for the loadprog structure
   187 0000023F 4889E5              <1>     mov rbp, rsp
   188 00000242 B901000000          <1>     mov ecx, 1  ;Start counting task numbers from 1
   189                              <1> ;Now setup the loadProgBlock on the stack
   190 00000247 31C0                <1>     xor eax, eax
   191 00000249 48894500            <1>     mov qword [rbp + loadProg.pEnv], rax    ;Copy the parent environment!
   192 0000024D 488D05(26000000)    <1>     lea rax, cmdTail
   193 00000254 48894508            <1>     mov qword [rbp + loadProg.pCmdLine], rax
   194 00000258 498D405C            <1>     lea rax, qword [r8 + psp.fcb1]
   195 0000025C 48894510            <1>     mov qword [rbp + loadProg.pfcb1], rax
   196 00000260 498D406C            <1>     lea rax, qword [r8 + psp.fcb2]
   197 00000264 48894518            <1>     mov qword [rbp + loadProg.pfcb2], rax
   198                              <1> loadLp:
   199 00000268 31C0                <1>     xor eax, eax
   200 0000026A 48894520            <1>     mov qword [rbp + loadProg.initRSP], rax ;Reset the return values to 0
   201 0000026E 48894528            <1>     mov qword [rbp + loadProg.initRIP], rax
   202 00000272 488B15(2C000000)    <1>     mov rdx, qword [pCmdShell]
   203 00000279 4889EB              <1>     mov rbx, rbp
   204 0000027C B8014B0000          <1>     mov eax, 4B01h
   205 00000281 CD21                <1>     int 21h
   206 00000283 7316                <1>     jnc .loadOk
   207                              <1> .badLoad:
   208 00000285 488D15(08010000)    <1>     lea rdx, noExecStr
   209                              <1>     ;Here we have to unwind the programs, set Int 22h in each PSP 
   210                              <1>     ; to an appropriate loaction, copy the SDA into DOS, and call EXIT.
   211                              <1>     ;For now, we cause a memory leak and proceed.
   212 0000028C 4C89C3              <1>     mov rbx, r8     ;Move SM PSP pointer int rbx
   213 0000028F B800500000          <1>     mov eax, 5000h  ;Reset the current PSP back to SM
   214 00000294 CD21                <1>     int 21h
   215 00000296 E9B9FEFFFF          <1>     jmp exitMcon
   216                              <1> .loadOk:
   217                              <1> ;rdi points to the pcb for this task
   218 0000029B 488D0531090000      <1>     lea rax, i22hHdlr
   219 000002A2 488987DA000000      <1>     mov qword [rdi + pcb.pInt22h], rax
   220 000002A9 B823350000          <1>     mov eax, 3523h  ;Get the default Int 23h handler!
   221 000002AE CD21                <1>     int 21h
   222 000002B0 48899FE2000000      <1>     mov qword [rdi + pcb.pInt23h], rbx
   223 000002B7 B824350000          <1>     mov eax, 3524h  ;Get the default Int 24h handler!
   224 000002BC CD21                <1>     int 21h
   225 000002BE 48899FEA000000      <1>     mov qword [rdi + pcb.pInt24h], rbx
   226 000002C5 488D1D22090000      <1>     lea rbx, interruptExit
   227 000002CC 48899FF2000000      <1>     mov qword [rdi + pcb.pInt2Eh], rbx
   228                              <1> ;   breakpoint
   229 000002D3 488B5D20            <1>     mov rbx, qword [rbp + loadProg.initRSP]
   230 000002D7 48895F52            <1>     mov qword [rdi + pcb.sPtda + ptda.qRSP], rbx ;Store the Stack value!
   231 000002DB 488B4528            <1>     mov rax, qword [rbp + loadProg.initRIP] 
   232 000002DF 488703              <1>     xchg rax, qword [rbx]   ;Swap the RIP value with the FCB words on the stack!
   233 000002E2 488987D2000000      <1>     mov qword [rdi + pcb.sPtda + ptda.sRegsTbl + 15*8], rax ;rax on regstack!
   234 000002E9 B800510000          <1>     mov eax, 5100h  ;Get Current PSP in rbx
   235 000002EE CD21                <1>     int 21h
   236 000002F0 48899F92000000      <1>     mov qword [rdi + pcb.sPtda + ptda.sRegsTbl + 7*8], rbx  ;PSP ptr @ r9
   237 000002F7 48899F9A000000      <1>     mov qword [rdi + pcb.sPtda + ptda.sRegsTbl + 8*8], rbx  ;PSP ptr @ r8
   238 000002FE 48C7475A02020000    <1>     mov qword [rdi + pcb.sPtda + ptda.sRegsTbl], 0202h      ;Flags!
   239                              <1> ;Make sure to save the screen number and process information!
   240 00000306 894F0C              <1>     mov dword [rdi + pcb.hScrnNum], ecx     ;Save the screen number of task!
   241 00000309 890F                <1>     mov dword [rdi + pcb.hPcb], ecx ;This is also the count of the task!
   242 0000030B 894F04              <1>     mov dword [rdi + pcb.hParPcb], ecx 
   243 0000030E 894F08              <1>     mov dword [rdi + pcb.dCsid], ecx 
   244                              <1> 
   245                              <1> ;Now copy the SDA into the pcb SDA
   246 00000311 51                  <1>     push rcx
   247 00000312 488B35(08000000)    <1>     mov rsi, qword [pDosSda]
   248 00000319 488DBFFA000000      <1>     lea rdi, qword [rdi + pcb.sdaCopy]
   249 00000320 8B0D(14000000)      <1>     mov ecx, dword [dSdaLen]
   250 00000326 F3A4                <1>     rep movsb   ;rdi now points to the next pcb
   251 00000328 59                  <1>     pop rcx
   252                              <1> ;Now reset the PSP back so that each process is a proper child of SM!
   253 00000329 B800500000          <1>     mov eax, 5000h  ;Set current PSP
   254 0000032E 4C89C3              <1>     mov rbx, r8
   255 00000331 CD21                <1>     int 21h
   256 00000333 FFC1                <1>     inc ecx
   257 00000335 3B0D(28000000)      <1>     cmp ecx, dword [dMaxSesIndx]
   258 0000033B 0F8627FFFFFF        <1>     jbe loadLp
   259                              <1> 
   260 00000341 4881C430000000      <1>     add rsp, loadProg_size  ;Reclaim the allocation in the end
   261                              <1> 
   262                              <1> ;Set ourselves to be our own parent now!
   263 00000348 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
   264                              <1> ;Setup the default int 22h and int 23h of the SM in the PSP since we are our
   265                              <1> ; own Parent. No need to set the interrupt vectors, thats done on entry to the 
   266                              <1> ; shell.
   267 0000034C 31C9                <1>     xor ecx, ecx    ;SM Hdl
   268 0000034E E86C060000          <1>     call getPcbPtr  ;Get the ptr in rdi 
   269 00000353 4889FE              <1>     mov rsi, rdi    ;Move ptr to rsi
   270                              <1> 
   271 00000356 488D1586080000      <1>     lea rdx, i22hShell
   272 0000035D 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   273 00000361 488996DA000000      <1>     mov qword [rsi + pcb.pInt22h], rdx
   274 00000368 488D1579080000      <1>     lea rdx, i23hHdlr
   275 0000036F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   276 00000373 488996E2000000      <1>     mov qword [rsi + pcb.pInt23h], rdx
   277 0000037A 488D156B080000      <1>     lea rdx, i24hHdlr
   278 00000381 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   279 00000385 488996EA000000      <1>     mov qword [rsi + pcb.pInt24h], rdx
   280                              <1> ;Now we gotta setup RIP, RSP, flags and regs for the Session Manager
   281 0000038C 488D15(00000000)    <1>     lea rdx, sm$shlTOS
   282 00000393 48895652            <1>     mov qword [rsi + pcb.sPtda + ptda.qRSP], rdx
   283 00000397 488D1593060000      <1>     lea rdx, shellMain  ;We enter at shellMain (interrupts on, and rsp ok)
   284 0000039E 488996D2000000      <1>     mov qword [rsi + pcb.sPtda + ptda.sRegsTbl + 15*8], rdx ;Set RIP
   285 000003A5 4C898E92000000      <1>     mov qword [rsi + pcb.sPtda + ptda.sRegsTbl + 7*8], r9  ;PSP ptr @ r9
   286 000003AC 4C89869A000000      <1>     mov qword [rsi + pcb.sPtda + ptda.sRegsTbl + 8*8], r8  ;PSP ptr @ r8
   287 000003B3 48C7465A02020000    <1>     mov qword [rsi + pcb.sPtda + ptda.sRegsTbl], 0202h     ;flags
   288                              <1> 
   289                              <1> ;Now put every task into middle priority list (schedule 15)!
   290 000003BB B00F                <1>     mov al, 15
   291 000003BD E836060000          <1>     call getSchedHeadPtr    ;Get the schedhead ptr in rsi
   292 000003C2 E84E060000          <1>     call getScheduleLock    ;Lock the schedule pointed to by rsi
   293                              <1> ;Now add all the tasks's we've just created to this list
   294 000003C7 31C9                <1>     xor ecx, ecx
   295 000003C9 E8F1050000          <1>     call getPcbPtr     ;Get pcb pointer in rdi for task 0
   296 000003CE E820060000          <1>     call getThreadPtr  ;Get ptr to the first ptda of rdi in rbp
   297 000003D3 FF4601              <1>     inc dword [rsi + schedHead.dNumEntry]
   298 000003D6 48896E05            <1>     mov qword [rsi + schedHead.pSchedHead], rbp ;This schedblk is the head
   299 000003DA 48896E0D            <1>     mov qword [rsi + schedHead.pSchedTail], rbp ;Tis also the tail!
   300                              <1> schedLp:
   301 000003DE FFC1                <1>     inc ecx
   302 000003E0 3B0D(28000000)      <1>     cmp ecx, dword [dMaxSesIndx]
   303 000003E6 771B                <1>     ja schedExit
   304 000003E8 E8D2050000          <1>     call getPcbPtr     ;Get pcb pointer in rdi for task ecx
   305 000003ED E801060000          <1>     call getThreadPtr   ;Get ptr to the first ptda of rdi in rbp
   306 000003F2 488B7E0D            <1>     mov rdi, qword [rsi + schedHead.pSchedTail] ;Get the last entry in the sched
   307 000003F6 48896F1A            <1>     mov qword [rdi + ptda.pNSlepPtda], rbp    ;rbp comes after this 
   308 000003FA 48896E0D            <1>     mov qword [rsi + schedHead.pSchedTail], rbp ;This ptda is the new last ptda
   309 000003FE FF4601              <1>     inc dword [rsi + schedHead.dNumEntry]       ;Added a new element to schedule
   310 00000401 EBDB                <1>     jmp short schedLp
   311                              <1> schedExit:
   312 00000403 E81E060000          <1>     call releaseScheduleLock
   313                              <1> 
   314 00000408 EB2C                <1>     jmp short i2ahJmp   ;Skip the timer stuff
   315                              <1> ;Now setup the timer infrastructure for the timer interrupt.
   316                              <1> ;Start by replacing the old timer interrupt with our better one.
   317 0000040A FA                  <1>     cli         ;Start by ensuring interrupts are off!
   318 0000040B B8F0350000          <1>     mov eax, 3500h | timerInt  ;Get ptr to timer interrupt in rbx
   319 00000410 CD21                <1>     int 21h
   320 00000412 48891D(1E030000)    <1>     mov qword [pOldTimer], rbx
   321 00000419 488D1514010000      <1>     lea rdx, timerIrq ;Get the pointer to the new handler
   322 00000420 B8F0250000          <1>     mov eax, 2500h | timerInt  ;Set ptr for timer interrupt
   323 00000425 CD21                <1>     int 21h
   324                              <1> 
   325                              <1> ;Now we set the timer to trigger and interrupt every ms.
   326 00000427 B036                <1>     mov al, 36h     ;Channel 0, same settings as BIOS
   327 00000429 E643                <1>     out PITcmd, al
   328                              <1>  
   329 0000042B B8A9040000          <1>     mov eax, 1193   ;Divisor to get frequency of 1000.15Hz
   330 00000430 E640                <1>     out PIT0, al    ;Set low byte of PIT reload value
   331 00000432 88E0                <1>     mov al, ah      ;ax = high 8 bits of reload value
   332 00000434 E640                <1>     out PIT0, al    
   333                              <1> i2ahJmp:
   334                              <1> ;Now setup the Int 2Ah infrastructure.
   335 00000436 488D1545010000      <1>     lea rdx, i2AhDisp
   336 0000043D B82A250000          <1>     mov eax, 252Ah
   337 00000442 CD21                <1>     int 21h
   338                              <1> ;Patch the DOS kernel to call Int 2Ah correctly.
   339                              <1> ;Go in reverse from rsi which points to the DOS SDA
   340 00000444 488B35(08000000)    <1>     mov rsi, qword [pDosSda]
   341 0000044B 488D5EFF            <1>     lea rbx, qword [rsi - 1]
   342 0000044F 488B7BF8            <1>     mov rdi, qword [rbx - 8]
   343 00000453 C60750              <1>     mov byte [rdi], 050h    ;Change from RET to PUSH RAX
   344 00000456 488B7BF0            <1>     mov rdi, qword [rbx - 16]
   345 0000045A C60750              <1>     mov byte [rdi], 050h    ;Change from RET to PUSH RAX
   346 0000045D 488B7BE8            <1>     mov rdi, qword [rbx - 24]
   347 00000461 C60750              <1>     mov byte [rdi], 050h    ;Change from RET to PUSH RAX
   348 00000464 488B7BE0            <1>     mov rdi, qword [rbx - 32]
   349 00000468 C60750              <1>     mov byte [rdi], 050h    ;Change from RET to PUSH RAX
   350                              <1> ;Now we are ready to jump!
   351                              <1> 
   352                              <1> ;
   353                              <1> ; TMP TMP TMP TMP TMP TMP TMP TMP
   354                              <1> ;
   355 0000046B 488D1509000000      <1>     lea rdx, errorStr
   356 00000472 B800090000          <1>     mov eax, 0900h
   357 00000477 CD21                <1>     int 21h
   358                              <1> lp:
   359 00000479 EBFE                <1>     jmp short lp
   360 0000047B 53657373696F6E204D- <1> errorStr db "Session Manager not ready yet. System halted!"
   360 00000484 616E61676572206E6F- <1>
   360 0000048D 742072656164792079- <1>
   360 00000496 65742E205379737465- <1>
   360 0000049F 6D2068616C74656421  <1>
   361                              <1> ;
   362                              <1> ; TMP TMP TMP TMP TMP TMP TMP TMP
   363                              <1> ;
   364                              <1> 
   365                              <1> ;Actual exit code below
   366 000004A8 FB                  <1>     sti         ;Ensure we return interrupts on!
   367 000004A9 B901000000          <1>     mov ecx, 1  ;Start COMMAND.COM on screen 1
   368 000004AE E9A3060000          <1>     jmp swapScreen
    10                                  %include "./src/text/disp.asm"
     1                              <1> ;------------------------------------------------------------
     2                              <1> ;All the DOSMGR dispatcher functions live here.
     3                              <1> ;------------------------------------------------------------
     4                              <1> 
     5                              <1> 
     6                              <1> ;------------------------------------------------------------
     7                              <1> ;               DevHelp routines.
     8                              <1> ;------------------------------------------------------------
     9                              <1> ;Used by multitasking drivers to communicate events to DOS.
    10                              <1> devHlp:
    11                              <1> ;Dispatcher for devHlp.
    12                              <1> ;Function number passed in edx
    13 000004B3 81FA05000000        <1>     cmp edx, DevHlp_ConsInputFilter
    14 000004B9 7440                <1>     je consInputFilter  
    15 000004BB 81FA07000000        <1>     cmp edx, DevHlp_Signal_SM
    16 000004C1 7449                <1>     je swapSes      
    17 000004C3 81FA09000000        <1>     cmp edx, DevHlp_ProcBlock
    18 000004C9 0F84EA030000        <1>     je procBlock    
    19 000004CF 81FA0A000000        <1>     cmp edx, DevHlp_ProcRun
    20 000004D5 0F842C040000        <1>     je procRun      
    21 000004DB 81FA10000000        <1>     cmp edx, DevHlp_GetDOSVar
    22 000004E1 7402                <1>     je getDosVar    
    23 000004E3 F9                  <1>     stc
    24                              <1>     return
    13 000004E4 C3                  <2>  ret
    25                              <1> getDosVar:
    26                              <1> ;Currently only recognise one var, eax = 0, ebx = any, ecx = 1
    27                              <1> ;Returns the pointer to the var/array in rax
    28 000004E5 85C0                <1>     test eax, eax
    29 000004E7 7402                <1>     jz .getScrnIo
    30                              <1> .exitBad:
    31 000004E9 F9                  <1>     stc
    32                              <1>     return
    13 000004EA C3                  <2>  ret
    33                              <1> .getScrnIo:
    34 000004EB 81F901000000        <1>     cmp ecx, 1  ;Is the var length one?
    35 000004F1 75F6                <1>     jne .exitBad
    36 000004F3 488D05(3A000000)    <1>     lea rax, bScrnIoOk  ;Else return the pointer (and CF=NC!)
    37                              <1>     return
    13 000004FA C3                  <2>  ret
    38                              <1> consInputFilter:
    39                              <1> ;Checks if the char is to be added to the internal buffer or not!
    40                              <1> ;Currently only checks for the magic code for SM invokation.
    41                              <1> ;Input: ax=SC/ASCII char pair
    42                              <1> ;Output: ZF=NZ: char pair should be added to the internal buffer
    43                              <1> ;        ZF=ZE: char pair should NOT be added to the internal buffer
    44 000004FB 663D0071            <1>     cmp ax, magicCode   ;If the magic char, do not add to internal buffer
    45                              <1>     retne
    35                              <2> cret ne
    17 000004FF 7401                <3>  j%-1 short %%a
    18                              <3>  return
    13 00000501 C3                  <4>  ret
    19                              <3> %%a:
    46                              <1>     ;Here if the magic code was encounted.
    47 00000502 50                  <1>     push rax
    48 00000503 31C0                <1>     xor eax, eax    ;Magic code requests a swap to screen zero!
    49 00000505 E802000000          <1>     call swapSes
    50 0000050A 58                  <1>     pop rax
    51                              <1>     return
    13 0000050B C3                  <2>  ret
    52                              <1> 
    53                              <1> swapSes:
    54                              <1> ;Entered with al = Suggested screen number. If bigger than maxsesindex, error!
    55 0000050C 50                  <1>     push rax
    56 0000050D 0FB6C0              <1>     movzx eax, al
    57 00000510 3905(28000000)      <1>     cmp dword [dMaxSesIndx], eax
    58 00000516 58                  <1>     pop rax
    59                              <1>     retb    ;Exit with Carry Set!
    47                              <2> cret b
    17 00000517 7301                <3>  j%-1 short %%a
    18                              <3>  return
    13 00000519 C3                  <4>  ret
    19                              <3> %%a:
    60 0000051A 9C                  <1>     pushfq
    61 0000051B FA                  <1>     cli 
    62 0000051C F605(3B000000)FF    <1>     test byte [bSM_Req], -1 ;If its set, dont set again!
    63 00000523 750D                <1>     jnz .exit
    64 00000525 C605(3B000000)FF    <1>     mov byte [bSM_Req], -1  ;Set the bit
    65 0000052C 8805(3C000000)      <1>     mov byte [bSM_Req_Scr], al   ;Suggest swapping to screen zero!
    66                              <1> .exit:
    67 00000532 9D                  <1>     popfq
    68                              <1>     return
    13 00000533 C3                  <2>  ret
    11                                  %include "./src/text/int.asm"
     1                              <1> ;All DOSMGR interrupt routines go here (not SM Shell)
     2                              <1> 
     3                              <1> 
     4                              <1> timerIrq:
     5                              <1> ;This is the replacement interrupt handler. 
     6 00000534 FA                  <1>     cli
     7 00000535 E826030000          <1>     call doSleepMgmt    ;Make sure to treat all sleeping tasks properly first!
     8 0000053A 50                  <1>     push rax
     9 0000053B FE05(1B030000)      <1>     inc byte [bSliceCnt]     ;Increment the slice counter
    10 00000541 0FB605(1C030000)    <1>     movzx eax, byte [bSliceSize]  ;Number of ms in one timeslice
    11 00000548 3805(1B030000)      <1>     cmp byte [bSliceCnt], al
    12 0000054E 750E                <1>     jne .notaskSwitch
    13 00000550 58                  <1>     pop rax
    14 00000551 E889020000          <1>     call taskSwitch  ;Change process
    15 00000556 50                  <1>     push rax
    16 00000557 C605(1B030000)00    <1>     mov byte [bSliceCnt], 0  ;Reset timer
    17                              <1> .notaskSwitch:
    18 0000055E FE05(1D030000)      <1>     inc byte [bTimerCnt] ;Increment the BIOS timer tracker
    19 00000564 803D(1D030000)37    <1>     cmp byte [bTimerCnt], 55 ;Every 55ms trigger the old timer interrupt
    20 0000056B 7407                <1>     je .callBIOSTimer ;Else, just exit normally
    21                              <1>     ;Else, tell the PIT to relax
    22 0000056D B020                <1>     mov al, EOI
    23 0000056F E620                <1>     out pic1cmd, al
    24 00000571 58                  <1>     pop rax
    25                              <1> .exit:
    26 00000572 48CF                <1>     iretq
    27                              <1> .callBIOSTimer:
    28 00000574 58                  <1>     pop rax
    29 00000575 C605(1D030000)00    <1>     mov byte [bTimerCnt], 0  ;Reset the hw counter tracker
    30 0000057C FF25(1E030000)      <1>     jmp qword [pOldTimer]    ;Jump to the old timer
    31                              <1> 
    32                              <1> 
    33                              <1> ;------------------------------------------------------------
    34                              <1> ;Int 2Ah Dispatcher
    35                              <1> ;------------------------------------------------------------
    36                              <1> i2AhDisp:
    37                              <1> ;Enter with interrupts off! This is to prevent race conditions on waits!
    38 00000582 FA                  <1>     cli ;Disable interrupts
    39 00000583 84E4                <1>     test ah, ah
    40 00000585 7427                <1>     jz status
    41 00000587 80FC03              <1>     cmp ah, 03h
    42 0000058A 7426                <1>     je ioblock
    43 0000058C 80FC80              <1>     cmp ah, 80h
    44 0000058F 7423                <1>     je enterCriticalSection
    45 00000591 80FC81              <1>     cmp ah, 81h
    46 00000594 0F84AA000000        <1>     je leaveCriticalSection
    47 0000059A 80FC82              <1>     cmp ah, 82h
    48 0000059D 0F84D8000000        <1>     je deleteCriticalSection
    49 000005A3 80FC84              <1>     cmp ah, 84h
    50 000005A6 0F840B010000        <1>     je releaseTimeslice
    51 000005AC 48CF                <1>     iretq
    52                              <1> 
    53                              <1> status:    ;AH=00h
    54 000005AE B4FF                <1>     mov ah, -1
    55 000005B0 48CF                <1>     iretq
    56                              <1> 
    57                              <1> ioblock:    ;AH=03h
    58                              <1> ;Since singletasking DevDrvIO is properly protected through critical sections
    59                              <1> ; we only need to ensure that access to devices via BIOS calls, Int 25h 
    60                              <1> ; and Int 26h have not been interrupted. This can be done by hooking, placing a
    61                              <1> ; flag and incrementing the flag each time we enter and exit, then checking 
    62                              <1> ; if that flag is high for that device. 
    63                              <1> ;Input: rsi -> ASCIIZ string for device
    64 000005B2 48CF                <1>     iretq
    65                              <1> 
    66                              <1> enterCriticalSection:    ;AH=80h
    67                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    68                              <1> ; CAVEAT CAVEAT CAVEAT CAVEAT CAVEAT CAVEAT CAVEAT CAVEAT CAVEAT CAVEAT 
    69                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    70                              <1> ;In what follows, DOS and Driver critical section refers to 
    71                              <1> ; interruptable and uninterruptable critical section respectively.
    72                              <1> ;Uninterruptable critical sections behave specially in that they assume
    73                              <1> ; that they are always being called before a driver request UNLESS
    74                              <1> ; either RBX or RSI are null pointers, in which case the special driver
    75                              <1> ; handling is skipped.
    76                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    77                              <1> ;If this is called for a DOS critical section, attempts to give the 
    78                              <1> ; lock to the caller. If it cannot, the task is swapped until it gets its
    79                              <1> ; next quantum. If it can, the lock is allocated to it.
    80                              <1> ;
    81                              <1> ;SPECIAL CASE: If called for a Driver critical section, and the driver
    82                              <1> ; is normal DOS driver, then it acts as in the case of the DOS critical
    83                              <1> ; section. However, in the case of the driver having the undocumented
    84                              <1> ; multitasking bit set, then the driver will not give the lock to the 
    85                              <1> ; task as it is understood that the driver is capable of handling
    86                              <1> ; concurrent threads within it. Furthermore, if the driver is the 
    87                              <1> ; CON driver, and the request is a READ, WRITE or WRITE/VERIFY 
    88                              <1> ; then the session number (screen number) handle is placed in the 
    89                              <1> ; ioReqPkt.strtsc of the packet.
    90 000005B4 50                  <1>     push rax
    91 000005B5 57                  <1>     push rdi
    92 000005B6 84C0                <1>     test al, al
    93 000005B8 743E                <1>     jz .exit
    94 000005BA 663D0200            <1>     cmp ax, 2
    95 000005BE 7738                <1>     ja .exit
    96 000005C0 488D05(55000000)    <1>     lea rax, drvLock
    97 000005C7 488D3D(49000000)    <1>     lea rdi, dosLock
    98 000005CE 480F44F8            <1>     cmove rdi, rax  ;Move the drvlock into rdi if al = 2
    99 000005D2 7428                <1>     je .drvCrit     ;And go to the driver special handling code.
   100                              <1> ;Else, we are a DOS critical section, go straight to the lock code
   101                              <1> .lockMain:
   102                              <1> ;Entered with rdi -> Lock to check
   103 000005D4 488B05(41000000)    <1>     mov rax, qword [pCurPtda]   ;Get the ptr to the current task
   104 000005DB 813F00000000        <1>     cmp dword [rdi + critLock.dCount], 0    ;If the lock is free, take it!
   105 000005E1 7506                <1>     jne .noGive
   106 000005E3 48894704            <1>     mov qword [rdi + critLock.pOwnerPcb], rax  ;Set yourself as owner!
   107 000005E7 EB0D                <1>     jmp short .incCount
   108                              <1> .noGive:
   109 000005E9 48394704            <1>     cmp qword [rdi + critLock.pOwnerPcb], rax
   110 000005ED 7407                <1>     je .incCount    ;If we own the lock, increment the count!
   111 000005EF E8EB010000          <1>     call taskSwitch ;Else, put the calling task on ice for one cycle.
   112 000005F4 EBDE                <1>     jmp short .lockMain     ;Try obtain the lock again!
   113                              <1> .incCount:
   114 000005F6 FF07                <1>     inc dword [rdi + critLock.dCount]   ;Increment the entry count!
   115                              <1> .exit:
   116 000005F8 5F                  <1>     pop rdi
   117 000005F9 58                  <1>     pop rax
   118 000005FA 48CF                <1>     iretq
   119                              <1> .drvCrit:
   120                              <1> ;Entered with:
   121                              <1> ;rdi -> Driver lock object
   122                              <1> ;rsi -> Driver header
   123                              <1> ;rbx -> Request packet
   124                              <1> ;If either rsi or rbx are NULL then we assume this is a non-driver 
   125                              <1> ; request for an uninterruptable critical section.
   126 000005FC 4885F6              <1>     test rsi, rsi
   127 000005FF 74D3                <1>     jz .lockMain
   128 00000601 4885DB              <1>     test rbx, rbx
   129 00000604 74CE                <1>     jz .lockMain
   130 00000606 0FB74608            <1>     movzx eax, word [rsi + drvHdr.attrib]
   131 0000060A 66A92000            <1>     test ax, devDrvMulti
   132 0000060E 74C4                <1>     jz .lockMain   ;If not a multitasking driver, try grab the lock!
   133                              <1> ;We reach the code below if we are entering an interruptable driver.
   134                              <1> ;In this case, we do not wait on the lock and proceed as normal.
   135 00000610 66A90080            <1>     test ax , devDrvChar
   136 00000614 74E2                <1>     jz .exit    ;Exit if not a char dev
   137 00000616 66250300            <1>     and ax, devDrvConIn | devDrvConOut
   138 0000061A 74DC                <1>     jz .exit    ;If neither bit set, exit
   139                              <1> ;Here if this is either a MDOS CON In or CON Out device. 
   140                              <1> ;If request is read/write, place current task's screen number 
   141                              <1> ; in the ioReqPkt.strtsc field (we zxtend the byte to qword).
   142                              <1> ;This is a kludge as DOS is not multitasking so of course will not 
   143                              <1> ; do this for us :) It is the only reasonable way of communicating 
   144                              <1> ; the screen number of the task making the request to the driver.
   145 0000061C 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]
   146 00000620 3D04000000          <1>     cmp eax, drvREAD
   147 00000625 740E                <1>     je .ioReq
   148 00000627 3D08000000          <1>     cmp eax, drvWRITE
   149 0000062C 7407                <1>     je .ioReq
   150 0000062E 3D09000000          <1>     cmp eax, drvWRITEVERIFY
   151 00000633 75C3                <1>     jne .exit
   152                              <1> .ioReq:
   153 00000635 488B05(41000000)    <1>     mov rax, qword [pCurPtda]
   154 0000063C 8B400C              <1>     mov eax, dword [rax + pcb.hScrnNum]
   155 0000063F 89431A              <1>     mov dword [rbx + ioReqPkt.strtsc], eax
   156 00000642 EBB4                <1>     jmp short .exit
   157                              <1> 
   158                              <1> leaveCriticalSection:    ;AH=81h
   159                              <1> ;If the calling task owns the lock, decrements the lock
   160 00000644 50                  <1>     push rax
   161 00000645 57                  <1>     push rdi
   162 00000646 84C0                <1>     test al, al ;If 0, exit
   163 00000648 742D                <1>     jz .exit
   164 0000064A 3C02                <1>     cmp al, 2
   165 0000064C 7729                <1>     ja .exit    ;If above 2, exit
   166 0000064E 488D3D(49000000)    <1>     lea rdi, dosLock
   167 00000655 488D05(55000000)    <1>     lea rax, drvLock
   168 0000065C 480F44F8            <1>     cmove rdi, rax  ;Swap rdi to drvLock if AL=2
   169 00000660 813F00000000        <1>     cmp dword [rdi + critLock.dCount], 0    ;If lock is free, exit!
   170 00000666 740F                <1>     je .exit
   171 00000668 488B05(41000000)    <1>     mov rax, qword [pCurPtda]   ;Else, check we own the lock
   172 0000066F 48394704            <1>     cmp qword [rdi + critLock.pOwnerPcb], rax
   173 00000673 7502                <1>     jne .exit   ;If we don't own the lock, exit!
   174 00000675 FF0F                <1>     dec dword [rdi + critLock.dCount]   ;Else, decrement the lock!
   175                              <1> .exit:
   176 00000677 5F                  <1>     pop rdi
   177 00000678 58                  <1>     pop rax
   178 00000679 48CF                <1>     iretq
   179                              <1> 
   180                              <1> deleteCriticalSection:      ;AH=82h
   181                              <1> ;Will clear any critical sections OWNED by the task that is trying to 
   182                              <1> ; enter the lock! Else, this function will do nothing.
   183 0000067B 50                  <1>     push rax
   184 0000067C 57                  <1>     push rdi
   185 0000067D 488B05(41000000)    <1>     mov rax, qword [pCurPtda]
   186 00000684 488D3D(49000000)    <1>     lea rdi, dosLock
   187 0000068B E810000000          <1>     call .clearLock
   188 00000690 488D3D(55000000)    <1>     lea rdi, drvLock
   189 00000697 E804000000          <1>     call .clearLock
   190 0000069C 5F                  <1>     pop rdi
   191 0000069D 58                  <1>     pop rax
   192 0000069E 48CF                <1>     iretq
   193                              <1> .clearLock:
   194 000006A0 F707FFFFFFFF        <1>     test dword [rdi + critLock.dCount], -1    ;Is this lock allocated?
   195                              <1>     retz    ;If this lock is free, exit! 
    23                              <2> cret z
    17 000006A6 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 000006A8 C3                  <4>  ret
    19                              <3> %%a:
   196 000006A9 48394704            <1>     cmp qword [rdi + critLock.pOwnerPcb], rax  ;Else, do we own it?
   197                              <1>     retne   ;If not, exit!
    35                              <2> cret ne
    17 000006AD 7401                <3>  j%-1 short %%a
    18                              <3>  return
    13 000006AF C3                  <4>  ret
    19                              <3> %%a:
   198 000006B0 C70700000000        <1>     mov dword [rdi + critLock.dCount], 0    ;Else, free it!
   199                              <1>     return
    13 000006B6 C3                  <2>  ret
   200                              <1> 
   201                              <1> 
   202                              <1> releaseTimeslice:  ;AH=84h
   203                              <1> ;Intercepts the keyboard and releases the timeslice for the task that enters.
   204 000006B7 E823010000          <1>     call taskSwitch
   205 000006BC 48CF                <1>     iretq
    12                                  %include "./src/text/switch.asm"
     1                              <1> ;All context switching functionality is here.
     2                              <1> 
     3                              <1> EXTERN sm$intTOS
     4                              <1> 
     5                              <1> 
     6                              <1> awakenNewTask:
     7                              <1> ;Sets the DOS and DOSMGR state for the new task to run.
     8                              <1> ;Input: ecx = Task number (handle) to switch to.
     9                              <1> ;Output: ecx set as current task.
    10                              <1> 
    11                              <1> 
    12                              <1> ;Set the SDA to the new tasks' SDA. 
    13 000006BE 488DB3FA000000      <1>     lea rsi, qword [rbx + pcb.sdaCopy] ;Point rdi to the sda space
    14 000006C5 488B3D(08000000)    <1>     mov rdi, qword [pDosSda]
    15 000006CC 8B0D(14000000)      <1>     mov ecx, dword [dSdaLen]
    16 000006D2 F3A4                <1>     rep movsb   ;Transfer over the SDA
    17                              <1> 
    18                              <1> ;Set the new tasks' DOS interrupt handlers.
    19 000006D4 488B93F2000000      <1>     mov rdx, qword [rbx + pcb.pInt2Eh]
    20 000006DB B82E000000          <1>     mov eax, 2Eh
    21 000006E0 E8B2020000          <1>     call setIntVector    
    22 000006E5 488B93EA000000      <1>     mov rdx, qword [rbx + pcb.pInt24h]
    23 000006EC B824000000          <1>     mov eax, 24h
    24 000006F1 E8A1020000          <1>     call setIntVector
    25 000006F6 488B93E2000000      <1>     mov rdx, qword [rbx + pcb.pInt23h]
    26 000006FD B823000000          <1>     mov eax, 23h
    27 00000702 E890020000          <1>     call setIntVector
    28 00000707 488B93DA000000      <1>     mov rdx, qword [rbx + pcb.pInt22h]
    29 0000070E B822000000          <1>     mov eax, 22h
    30 00000713 E87F020000          <1>     call setIntVector 
    31                              <1> 
    32                              <1> ;Now set the CON writing ok var if this task is on the same screen!
    33 00000718 C605(3A000000)00    <1>     mov byte [bScrnIoOk], 0 ;Denote output not ok
    34 0000071F 488B3D(41000000)    <1>     mov rdi, qword [pCurPtda]    ;Get the thread ptr
    35 00000726 488B7F08            <1>     mov rdi, qword [rdi + ptda.pPcb]    ;Get ptr to the owner pcb.
    36 0000072A 8B470C              <1>     mov eax, dword [rdi + pcb.hScrnNum] ;Get the process screen number
    37 0000072D 3805(39000000)      <1>     cmp byte [bCurScrNum], al
    38                              <1>     retne
    35                              <2> cret ne
    17 00000733 7401                <3>  j%-1 short %%a
    18                              <3>  return
    13 00000735 C3                  <4>  ret
    19                              <3> %%a:
    39 00000736 FE0D(3A000000)      <1>     dec byte [bScrnIoOk]    ;Denote output ok!
    40                              <1>     return
    13 0000073C C3                  <2>  ret
    41                              <1> 
    42                              <1> sleepCurrentTask:
    43                              <1> ;Puts the current task on ice, saves all of its relevant state in 
    44                              <1> ; the pcb and then returns to the caller.
    45 0000073D 488B3D(41000000)    <1>     mov rdi, qword [pCurPtda]
    46 00000744 57                  <1>     push rdi    ;Save the CurTask pointer for use later!
    47 00000745 488DBFFA000000      <1>     lea rdi, qword [rdi + pcb.sdaCopy] ;Point rdi to the sda space
    48 0000074C 488B35(08000000)    <1>     mov rsi, qword [pDosSda]
    49 00000753 8B0D(14000000)      <1>     mov ecx, dword [dSdaLen]
    50 00000759 F3A4                <1>     rep movsb   ;Transfer over the SDA
    51 0000075B 5F                  <1>     pop rdi
    52                              <1> ;Save the current Int 22h, 23h and 24h handlers in the paused tasks' PCB.
    53 0000075C B822000000          <1>     mov eax, 22h
    54 00000761 E807020000          <1>     call getIntVector
    55 00000766 48899FDA000000      <1>     mov qword [rdi + pcb.pInt22h], rbx
    56 0000076D B823000000          <1>     mov eax, 23h
    57 00000772 E8F6010000          <1>     call getIntVector
    58 00000777 48899FE2000000      <1>     mov qword [rdi + pcb.pInt23h], rbx
    59 0000077E B824000000          <1>     mov eax, 24h
    60 00000783 E8E5010000          <1>     call getIntVector
    61 00000788 48899FEA000000      <1>     mov qword [rdi + pcb.pInt24h], rbx
    62 0000078F B82E000000          <1>     mov eax, 2Eh
    63 00000794 E8D4010000          <1>     call getIntVector
    64 00000799 48899FF2000000      <1>     mov qword [rdi + pcb.pInt2Eh], rbx
    65                              <1>     return
    13 000007A0 C3                  <2>  ret
    66                              <1> 
    67                              <1> chooseNextTask:
    68                              <1> ;Makes a choice of the next task. For now, its the next task,
    69                              <1> ; unless the SM has been signalled through the keyboard. Furthermore, 
    70                              <1> ; no task switch is enacted if we are in a critical section!
    71                              <1> 
    72                              <1> ;NOTE!! A task that owns a driver critical section (02h) MUST NOT be 
    73                              <1> ; interrupted. This is because the driver expects to have full control
    74                              <1> ; over the hardware and will not be happy if someone else tries to 
    75                              <1> ; do something whilst waiting for a new timeslice. A driver 
    76                              <1> ; can communicate that it is interruptable by setting the new multitasking
    77                              <1> ; bit in the header. Then Int 2Ah will no allocate the lock to it.
    78                              <1> ;A task that owns a DOS critical section (01h) can be interrupted.
    79                              <1> 
    80                              <1> ;Start by checking that we don't own the uninterruptable lock. If
    81                              <1> ; we do, exit! We should never be in a situation where it is allocated 
    82                              <1> ; and we don't own it here.
    83 000007A1 488B3D(41000000)    <1>     mov rdi, qword [pCurPtda]
    84 000007A8 8B05(55000000)      <1>     mov eax, dword [drvLock + critLock.dCount]
    85 000007AE 85C0                <1>     test eax, eax
    86 000007B0 7416                <1>     jz .noDrvLock   ;Not owned, proceed!
    87 000007B2 483B3D(59000000)    <1>     cmp rdi, qword [drvLock + critLock.pOwnerPcb]
    88                              <1>     rete    ;Return if they are equal!
    31                              <2> cret e
    17 000007B9 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 000007BB C3                  <4>  ret
    19                              <3> %%a:
    89 000007BC 488D15(10020000)    <1>     lea rdx, badLockStr
    90 000007C3 E97B010000          <1>     jmp fatalHalt
    91                              <1> .noDrvLock:
    92                              <1>     return   ;TMPTMP: Keep current task!
    13 000007C8 C3                  <2>  ret
    93                              <1> ;Now we know we don't own the uninterruptable lock, we choose a task
    94                              <1> ; to swap to. Check if the Screen Manager has told us what to swap to.
    95                              <1> ; If it hasn't, we check if the task screen is the same as the current 
    96                              <1> ; screen. If it isnt, swap to the task on that screen. Else, swap
    97                              <1> ; to the next task that isn't asleep. If all tasks are asleep then 
    98                              <1> ; pick the next task and wait on it.
    99                              <1> ;rdi points to the current task.
   100                              <1> 
   101                              <1> ;End by setting the new task and signalling procrun on this
   102 000007C9 890D(3D000000)      <1>     mov dword [hCurPtda], ecx  ;Store the task number 
   103 000007CF E8EB010000          <1>     call getPcbPtr ;Get ptr in rdi to the current PCB table
   104 000007D4 4889FB              <1>     mov rbx, rdi
   105 000007D7 48891D(41000000)    <1>     mov qword [pCurPtda], rbx           ;Setup internal data properly!
   106                              <1>     return
    13 000007DE C3                  <2>  ret
   107                              <1> 
   108                              <1> 
   109                              <1> taskSwitch:
   110                              <1> ;Called always with interrupts turned off!
   111                              <1> ;If a task needed to be put to sleep for a period of time, then 
   112                              <1> ; we have already set the sleep information in the pcb before coming
   113                              <1> ; here.
   114 000007DF 48871D(41000000)    <1>     xchg qword [pCurPtda], rbx  ;Get the ptr to the current session. Save rbx.
   115 000007E6 48896352            <1>     mov qword [rbx + pcb.sPtda + ptda.qRSP], rsp
   116 000007EA 488DA3DA000000      <1>     lea rsp, qword [rbx + pcb.sPtda + ptda.boS] ;Point rsp to where to store regs
   117 000007F1 48871D(41000000)    <1>     xchg qword [pCurPtda], rbx  ;Get back the value of rbx in rbx.
   118 000007F8 50                  <1>     push rax
   119 000007F9 53                  <1>     push rbx
   120 000007FA 51                  <1>     push rcx
   121 000007FB 52                  <1>     push rdx
   122 000007FC 56                  <1>     push rsi
   123 000007FD 57                  <1>     push rdi
   124 000007FE 55                  <1>     push rbp
   125 000007FF 4150                <1>     push r8
   126 00000801 4151                <1>     push r9
   127 00000803 4152                <1>     push r10
   128 00000805 4153                <1>     push r11
   129 00000807 4154                <1>     push r12 
   130 00000809 4155                <1>     push r13
   131 0000080B 4156                <1>     push r14
   132 0000080D 4157                <1>     push r15
   133 0000080F 9C                  <1>     pushfq
   134 00000810 FC                  <1>     cld ;Ensure all writes occur in the right way.
   135 00000811 488D25(00000000)    <1>     lea rsp, sm$intTOS  ;Now go to the interrupt stack
   136                              <1> 
   137 00000818 E820FFFFFF          <1>     call sleepCurrentTask
   138 0000081D E87FFFFFFF          <1>     call chooseNextTask     ;Sets the task variables for the new task
   139 00000822 E897FEFFFF          <1>     call awakenNewTask
   140                              <1> 
   141 00000827 488B1D(41000000)    <1>     mov rbx, qword [pCurPtda]
   142                              <1> ;Skip reloading the flags here!
   143 0000082E 488D6362            <1>     lea rsp, qword [rbx + pcb.sPtda + ptda.sRegsTbl + 8]
   144 00000832 415F                <1>     pop r15
   145 00000834 415E                <1>     pop r14
   146 00000836 415D                <1>     pop r13
   147 00000838 415C                <1>     pop r12
   148 0000083A 415B                <1>     pop r11
   149 0000083C 415A                <1>     pop r10
   150 0000083E 4159                <1>     pop r9
   151 00000840 4158                <1>     pop r8
   152 00000842 5D                  <1>     pop rbp
   153 00000843 5F                  <1>     pop rdi
   154 00000844 5E                  <1>     pop rsi
   155 00000845 5A                  <1>     pop rdx
   156 00000846 59                  <1>     pop rcx
   157 00000847 5B                  <1>     pop rbx
   158 00000848 58                  <1>     pop rax
   159 00000849 48871D(41000000)    <1>     xchg qword [pCurPtda], rbx
   160 00000850 488B6352            <1>     mov rsp, qword [rbx + pcb.sPtda + ptda.qRSP]
   161                              <1> ;Reload the flags once we have switched stacks!
   162 00000854 FF735A              <1>     push qword [rbx + pcb.sPtda + ptda.sRegsTbl]
   163 00000857 48871D(41000000)    <1>     xchg qword [pCurPtda], rbx  ;Now swap things back  
   164 0000085E 9D                  <1>     popfq   ;Pop flags back right at the end :)
   165                              <1>     return
    13 0000085F C3                  <2>  ret
    13                                  %include "./src/text/proc.asm"
     1                              <1> ;Process and thread management routines live here
     2                              <1> 
     3                              <1> doSleepMgmt:
     4                              <1> ;Decrements the sleep counter for each sleeping ptda on the sleep list
     5                              <1> ; and removes entries from the list if they have finished their sleep.
     6 00000860 57                  <1>     push rdi
     7 00000861 56                  <1>     push rsi
     8 00000862 31F6                <1>     xor esi, esi    ;Zero the "previous" pointer
     9 00000864 488B3D(69000000)    <1>     mov rdi, qword [sleepPtr]
    10                              <1> .lp:
    11 0000086B 4885FF              <1>     test rdi, rdi
    12 0000086E 7446                <1>     jz .exit
    13 00000870 817F2200000000      <1>     cmp dword [rdi + ptda.dSleepLen], 0      ;A never awaken task?
    14 00000877 7434                <1>     je .gotoNext
    15 00000879 FF4F22              <1>     dec dword [rdi + ptda.dSleepLen]
    16 0000087C 752F                <1>     jnz .gotoNext
    17                              <1> ;Start by awakening the task.
    18 0000087E 66816718F3FF        <1>     and word [rdi + ptda.wFlags], ~(THREAD_SLEEP | THREAD_LIGHT_SLEEP)
    19 00000884 66814F180100        <1>     or word [rdi + ptda.wFlags], THREAD_ALIVE
    20                              <1> ;Now set that this task is being awoken due to timeout wakeup
    21 0000088A C7472601000000      <1>     mov dword [rdi + ptda.dAwakeCode], AWAKE_TIMEOUT
    22                              <1> ;Here take the ptda out of the sleep list.
    23 00000891 50                  <1>     push rax
    24 00000892 488B471A            <1>     mov rax, qword [rdi + ptda.pNSlepPtda]    ;Get the next PTDA ptr in rax
    25 00000896 4885F6              <1>     test rsi, rsi   ;Are we replacing the first ptda in the list?
    26 00000899 750D                <1>     jnz .noHead
    27 0000089B 488905(69000000)    <1>     mov qword [sleepPtr], rax ;If so, put the link into the head
    28 000008A2 4889C7              <1>     mov rdi, rax    ;Move rdi to the new head of the list
    29 000008A5 58                  <1>     pop rax
    30 000008A6 EBC3                <1>     jmp short .lp   ;And go again!
    31                              <1> .noHead:
    32 000008A8 4889461A            <1>     mov qword [rsi + ptda.pNSlepPtda], rax ;Else in the ptda
    33 000008AC 58                  <1>     pop rax
    34                              <1> .gotoNext:
    35 000008AD 4889FE              <1>     mov rsi, rdi    ;Make the current ptda the anchor
    36 000008B0 488B7F1A            <1>     mov rdi, qword [rdi + ptda.pNSlepPtda]    ;Get the next ptda
    37 000008B4 EBB5                <1>     jmp short .lp
    38                              <1> .exit:
    39 000008B6 5E                  <1>     pop rsi
    40 000008B7 5F                  <1>     pop rdi
    41                              <1>     return
    13 000008B8 C3                  <2>  ret
    42                              <1> 
    43                              <1> procBlock:
    44                              <1> ;Tells DOS to put this thread of execution for this task to sleep!
    45                              <1> ;Called with interrupts turned off.
    46                              <1> ;When called, use the following sequence:
    47                              <1> ; CLI
    48                              <1> ; while (condition)
    49                              <1> ;   prockBlock(eventId)
    50                              <1> ;Interrupts are turned off to prevent a race condition with procRun.
    51                              <1> ;
    52                              <1> ;Can only be called from a multitasking driver that declares itself so as
    53                              <1> ; these tasks don't enter the driver critical section.
    54                              <1> 
    55                              <1> ;Talks about the current procedure only!
    56                              <1> ;On entry: Interrupts are off. rbx = Event identifier. ecx = Timeout interval.
    57                              <1> ;           If dh != 0, the sleep can be awakened prematurely.
    58                              <1> ;On exit: Interrupts are on.
    59                              <1> ;   eax = Awake code.
    60                              <1> ;   CF=NC -> Event wakeup (i.e. procrun called on event id)
    61                              <1> ;   CF=CY -> Unusual wakeup,
    62                              <1> ;       ZF=ZE -> Timeout wakeup
    63                              <1> ;       ZF=NZ -> Someone (probably scheduler) woke up this task prematurely
    64 000008B9 56                  <1>     push rsi
    65 000008BA 57                  <1>     push rdi
    66 000008BB 488B3D(41000000)    <1>     mov rdi, qword [pCurPtda]
    67                              <1> ;Start by indicating that the thread can go to sleep.
    68 000008C2 66814F180400        <1>     or word [rdi + ptda.wFlags], THREAD_SLEEP
    69 000008C8 66816718FEFF        <1>     and word [rdi + ptda.wFlags], ~THREAD_ALIVE
    70 000008CE 84F6                <1>     test dh, dh
    71 000008D0 7406                <1>     jz .noInt
    72 000008D2 66814F180800        <1>     or word [rdi + ptda.wFlags], THREAD_LIGHT_SLEEP
    73                              <1> .noInt:
    74                              <1> ;Now set the event id and the length for the sleep 
    75 000008D8 48895F2A            <1>     mov qword [rdi + ptda.qEventId], rbx
    76 000008DC 894F22              <1>     mov dword [rdi + ptda.dSleepLen], ecx
    77 000008DF 488B35(69000000)    <1>     mov rsi, qword [sleepPtr]   ;Get the old head of the list
    78 000008E6 48893D(69000000)    <1>     mov qword [sleepPtr], rdi   ;Place us at the head of the list
    79 000008ED 4889771A            <1>     mov qword [rdi + ptda.pNSlepPtda], rsi    ;Make the old head the next second
    80 000008F1 E8E9FEFFFF          <1>     call taskSwitch             ;And now we swap tasks!
    81 000008F6 8B4726              <1>     mov eax, dword [rdi + ptda.dAwakeCode] 
    82 000008F9 85C0                <1>     test eax, eax
    83 000008FB 7406                <1>     jz .exit
    84 000008FD 3D01000000          <1>     cmp eax, AWAKE_TIMEOUT  ;Set zero flag if we were awoken due to timeout
    85 00000902 F9                  <1>     stc
    86                              <1> .exit:
    87 00000903 FB                  <1>     sti
    88 00000904 5F                  <1>     pop rdi
    89 00000905 5E                  <1>     pop rsi
    90                              <1>     return
    13 00000906 C3                  <2>  ret
    91                              <1> 
    92                              <1> procRun:
    93                              <1> ;We go through each queue and find every single thread block.
    94                              <1> ;On entry:  rbx = Event id to awaken tasks on.
    95                              <1> ;On exit:   eax = Count of processes woken up. If zero, ZF=ZE.
    96 00000907 51                  <1>     push rcx
    97 00000908 57                  <1>     push rdi
    98 00000909 55                  <1>     push rbp
    99 0000090A 31C0                <1>     xor eax, eax    ;Use eax as the counter of free'd processes
   100 0000090C 31C9                <1>     xor ecx, ecx
   101                              <1> .lp:
   102 0000090E E8AC000000          <1>     call getPcbPtr  ;Get the ptr in rdi
   103 00000913 E8DB000000          <1>     call getThreadPtr   ;Get ptr to the first PTDA in rbp
   104 00000918 48395D2A            <1>     cmp qword [rbp + ptda.qEventId], rbx
   105 0000091C 7515                <1>     jne .gotoNext
   106                              <1> ;Here signal this thread to run! Set awake code, clear sleep and set alive!
   107 0000091E C7452600000000      <1>     mov dword [rbp + ptda.dAwakeCode], AWAKE_NORMAL
   108 00000925 66816518F3FF        <1>     and word [rbp + ptda.wFlags], ~(THREAD_SLEEP | THREAD_LIGHT_SLEEP)
   109 0000092B 66814D180100        <1>     or word [rbp + ptda.wFlags], THREAD_ALIVE
   110 00000931 FFC0                <1>     inc eax     ;Increment the counter
   111                              <1> .gotoNext:
   112 00000933 FFC1                <1>     inc ecx ;Prepare to go to the next one
   113 00000935 3B0D(24000000)      <1>     cmp ecx, dword [dMaxTask]
   114 0000093B 75D1                <1>     jne .lp
   115 0000093D 5D                  <1>     pop rbp
   116 0000093E 5F                  <1>     pop rdi
   117 0000093F 59                  <1>     pop rcx
   118 00000940 85C0                <1>     test eax, eax   ;Set ZF if appropriate
   119                              <1>     return
    13 00000942 C3                  <2>  ret
   120                              <1> 
   121                              <1> 
   122                              <1> fatalHalt:
   123                              <1> ;This is the handler if a fatal error occurs where we need to halt the 
   124                              <1> ; machine. We call DOS as we don't need to preserve anything since we 
   125                              <1> ; freeze the machine. 
   126                              <1> ;Input: rdx -> String to print.
   127 00000943 52                  <1>     push rdx
   128 00000944 488D15(00020000)    <1>     lea rdx, fatalStr
   129 0000094B E815000000          <1>     call .outStr
   130 00000950 5A                  <1>     pop rdx
   131 00000951 E80F000000          <1>     call .outStr
   132 00000956 488D15(3A020000)    <1>     lea rdx, sysHltStr
   133 0000095D E803000000          <1>     call .outStr
   134                              <1> ;
   135                              <1> ;Here provide a regdump of the system registers (and possibly stack?). 
   136                              <1> ;
   137 00000962 FA                  <1>     cli
   138                              <1> .deadLp:
   139 00000963 EBFE                <1>     jmp short .deadLp
   140                              <1> .outStr:
   141 00000965 B800090000          <1>     mov eax, 0900h
   142 0000096A CD21                <1>     int 21h
   143                              <1>     return
    13 0000096C C3                  <2>  ret
    14                                  %include "./src/text/util.asm"
     1                              <1> ;Misc utility functions go here
     2                              <1> 
     3                              <1> getIntVector:
     4                              <1> ;Called with:
     5                              <1> ;Interrupts Off!
     6                              <1> ; al = Interrupt number
     7                              <1> ;Returns: 
     8                              <1> ; rbx -> Ptr to interrupt handler
     9 0000096D 0F010D(11030000)    <1>     sidt [pIDT]    ;Get the current IDT base pointer
    10 00000974 0FB6C0              <1>     movzx eax, al
    11 00000977 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    12 0000097B 480305(13030000)    <1>     add rax, qword [pIDT.base]    
    13 00000982 31DB                <1>     xor ebx, ebx
    14 00000984 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    15 00000987 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    16 0000098B 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    17 0000098F 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    18 00000993 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    19                              <1>     return
    13 00000996 C3                  <2>  ret
    20                              <1> 
    21                              <1> setIntVector:
    22                              <1> ;Called with:
    23                              <1> ;Interrupts Off!
    24                              <1> ;   rdx = Pointer to interrupt handler
    25                              <1> ;   al = Interrupt number
    26 00000997 0F010D(11030000)    <1>     sidt [pIDT]    ;Get the current IDT base pointer
    27 0000099E 0FB6C0              <1>     movzx eax, al
    28 000009A1 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    29 000009A5 480305(13030000)    <1>     add rax, qword [pIDT.base]    
    30 000009AC 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
    31 000009AF 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
    32 000009B3 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
    33 000009B7 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
    34 000009BB 895008              <1>     mov dword [rax + 8], edx
    35                              <1>     return
    13 000009BE C3                  <2>  ret
    36                              <1> 
    37                              <1> 
    38                              <1> getPcbPtr:
    39                              <1> ;Return a ptr to the requested PCB in rdi
    40                              <1> ;Input: ecx = Number of the pcb to get the pointer of!
    41                              <1> ;Output: rdi -> PCB requested
    42 000009BF 488B3D(18000000)    <1>     mov rdi, qword [pPcbTbl] ;Get head of SFT pointer
    43                              <1> .walk:
    44 000009C6 3B4F08              <1>     cmp ecx, dword [rdi + soth.dNumEntry]
    45 000009C9 7211                <1>     jb .thisTable
    46 000009CB 2B4F08              <1>     sub ecx, dword [rdi + soth.dNumEntry] ;Subtract
    47 000009CE 488B3F              <1>     mov rdi, qword [rdi + soth.pNextSoth] ;Goto next table
    48 000009D1 4881FFFFFFFFFF      <1>     cmp rdi, -1
    49 000009D8 75EC                <1>     jne .walk
    50 000009DA F9                  <1>     stc
    51                              <1>     return
    13 000009DB C3                  <2>  ret
    52                              <1> .thisTable:
    53 000009DC 50                  <1>     push rax
    54 000009DD 52                  <1>     push rdx
    55 000009DE 8B05(20000000)      <1>     mov eax, dword [dPcbLen]
    56 000009E4 F7E1                <1>     mul ecx
    57 000009E6 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
    58 000009E9 5A                  <1>     pop rdx
    59 000009EA 58                  <1>     pop rax
    60 000009EB 4881C710000000      <1>     add rdi, soth_size  ;Go past the header
    61                              <1>     return
    13 000009F2 C3                  <2>  ret
    62                              <1> 
    63                              <1> getThreadPtr:
    64                              <1> ;Input: rdi -> PCB to get the thread pointer to
    65                              <1> ;Output: rbp -> Primary (foreground) ptda of the process
    66 000009F3 488D6F20            <1>     lea rbp, qword [rdi + pcb.sPtda]
    67                              <1>     return
    13 000009F7 C3                  <2>  ret
    68                              <1> 
    69                              <1> getSchedHeadPtr:
    70                              <1> ;Gets a pointer to your desired schedule.
    71                              <1> ;Input: al = Number of the schedule you desire (0-31)
    72 000009F8 50                  <1>     push rax
    73 000009F9 53                  <1>     push rbx
    74 000009FA BB1F000000          <1>     mov ebx, MAX_SCHED
    75 000009FF 29C3                <1>     sub ebx, eax    ;Get the reverse order schedule number in ebx
    76 00000A01 B815000000          <1>     mov eax, schedHead_size
    77 00000A06 F7E3                <1>     mul ebx 
    78 00000A08 488D35(71000000)    <1>     lea rsi, scheduleLists
    79 00000A0F 4801C6              <1>     add rsi, rax
    80 00000A12 5B                  <1>     pop rbx
    81 00000A13 58                  <1>     pop rax
    82                              <1>     return 
    13 00000A14 C3                  <2>  ret
    83                              <1> 
    84                              <1> getScheduleLock:
    85                              <1> ;Will attempt to get the lock for a schedule head. Will spin on it
    86                              <1> ; until it can get it. 
    87                              <1> ;Input: rsi -> Schedule head to obtain lock for.
    88 00000A15 50                  <1>     push rax
    89 00000A16 53                  <1>     push rbx
    90 00000A17 31DB                <1>     xor ebx, ebx
    91 00000A19 FFCB                <1>     dec ebx     ;Make into -1
    92                              <1> .lp:
    93 00000A1B 31C0                <1>     xor eax, eax    ;Set/Reset al to zero
    94                              <1>     ;If var = al, move bl (-1) into the lock. Else mov var into al.
    95 00000A1D F00FB01E            <1>     lock cmpxchg byte [rsi + schedHead.bLock], bl
    96 00000A21 75F8                <1>     jnz .lp     ;If the var was not 0, check again!
    97 00000A23 5B                  <1>     pop rbx
    98 00000A24 58                  <1>     pop rax
    99                              <1>     return
    13 00000A25 C3                  <2>  ret
   100                              <1> 
   101                              <1> 
   102                              <1> releaseScheduleLock:
   103 00000A26 C60600              <1>     mov byte [rsi + schedHead.bLock], 0
   104                              <1>     return
    13 00000A29 C3                  <2>  ret
    15                                  %include "./src/text/shell.asm"
     1                              <1> ;This is the main Session Manager "interactive" shell.
     2                              <1> 
     3                              <1>     EXTERN sm$shlTOS
     4                              <1> 
     5                              <1> shellEntry:
     6                              <1> ;Entered with interrupts on.
     7 00000A2A 488D25(00000000)    <1>     lea rsp, sm$shlTOS  ;Set/Reset internal shell stack! 
     8                              <1> ;And fall through to the main print loop
     9                              <1> shellMain:
    10                              <1> ;The shell main routine prints the number of sessions,
    11                              <1> ; the program names.
    12 00000A31 E838010000          <1>     call resetScreen
    13                              <1> ;Printing the screen header!
    14 00000A36 488D15(85030000)    <1>     lea rdx, ttlStr
    15 00000A3D E87D010000          <1>     call puts
    16 00000A42 488D15(9E020000)    <1>     lea rdx, sessStr
    17 00000A49 E871010000          <1>     call puts
    18 00000A4E 8B15(28000000)      <1>     mov edx, dword [dMaxSesIndx]    ;This is also number of USER sessions
    19 00000A54 FFC2                <1>     inc edx     ;Add 1 to include the SM session
    20 00000A56 80C230              <1>     add dl, "0" ;Convert to ASCII char
    21 00000A59 E859010000          <1>     call putch
    22 00000A5E E864010000          <1>     call putNewline
    23 00000A63 488D15(4D020000)    <1>     lea rdx, uline
    24 00000A6A E850010000          <1>     call puts
    25 00000A6F E853010000          <1>     call putNewline
    26                              <1> ;Printing the sessions.
    27 00000A74 B230                <1>     mov dl, "0"
    28 00000A76 E83C010000          <1>     call putch
    29 00000A7B 488D15(E6020000)    <1>     lea rdx, colonStr
    30 00000A82 E838010000          <1>     call puts
    31 00000A87 488D15(42030000)    <1>     lea rdx, sesManStr
    32 00000A8E E82C010000          <1>     call puts
    33 00000A93 E82F010000          <1>     call putNewline
    34                              <1> ;Now we print the name from each session's current PSP environment pointer.
    35 00000A98 B901000000          <1>     mov ecx, 1  ;Start from this session number
    36                              <1> .printLp:
    37 00000A9D 89CA                <1>     mov edx, ecx
    38 00000A9F 80C230              <1>     add dl, "0" 
    39 00000AA2 E810010000          <1>     call putch
    40 00000AA7 488D15(E6020000)    <1>     lea rdx, colonStr
    41 00000AAE E80C010000          <1>     call puts
    42 00000AB3 488D15(32030000)    <1>     lea rdx, waitStr    ;Now print the state of the session
    43 00000ABA E800010000          <1>     call puts
    44                              <1>     ;Now get the string to print
    45 00000ABF E8FBFEFFFF          <1>     call getPcbPtr ;Get the pcb ptr in rdi
    46 00000AC4 488B9712010000      <1>     mov rdx, qword [rdi + pcb.sdaCopy + sda.currentPSP]    ;Get the PSPptr
    47 00000ACB E8AD000000          <1>     call getProcName    ;Get the process name ptr for process of PSP in rdx
    48 00000AD0 730E                <1>     jnc .nameFound
    49 00000AD2 488D15(67030000)    <1>     lea rdx, noNameStr
    50 00000AD9 E8E1000000          <1>     call puts
    51 00000ADE EB1A                <1>     jmp short .nextSession
    52                              <1> .nameFound:
    53 00000AE0 4889D7              <1>     mov rdi, rdx    ;Copy the ptr here to get the len of the ASCIIZ string
    54 00000AE3 51                  <1>     push rcx        ;Save the number of the pcb we are at
    55 00000AE4 B812120000          <1>     mov eax, 1212h
    56 00000AE9 CD2F                <1>     int 2Fh
    57                              <1>     ;ecx now has the string length + terminating null
    58                              <1>     ;rdx points to the ASCIIZ string
    59 00000AEB FFC9                <1>     dec ecx     ;Drop the terminating null
    60 00000AED BB01000000          <1>     mov ebx, 1  ;STDOUT
    61 00000AF2 B800400000          <1>     mov eax, 4000h
    62 00000AF7 CD21                <1>     int 21h
    63 00000AF9 59                  <1>     pop rcx     ;Get back the pcb number
    64                              <1> .nextSession:
    65 00000AFA E8C8000000          <1>     call putNewline
    66 00000AFF FFC1                <1>     inc ecx
    67 00000B01 390D(28000000)      <1>     cmp dword [dMaxSesIndx], ecx   ;Keep going until dMaxSesIndx < ecx
    68 00000B07 7394                <1>     jae .printLp
    69                              <1> ;All printing done, now wait for input from user
    70 00000B09 488D15(10030000)    <1>     lea rdx, helpStr
    71 00000B10 E8AA000000          <1>     call puts
    72 00000B15 488D15(E9020000)    <1>     lea rdx, promptStr
    73 00000B1C E89E000000          <1>     call puts
    74 00000B21 488D15(34000000)    <1>     lea rdx, inStr
    75 00000B28 66C7020200          <1>     mov word [rdx], 0002h   ;Init the buffered string
    76 00000B2D B8000A0000          <1>     mov eax, 0A00h  ;Await buffered input
    77 00000B32 CD21                <1>     int 21h
    78 00000B34 0FB64A02            <1>     movzx ecx, byte [rdx + 2]
    79 00000B38 80F93F              <1>     cmp cl, "?"
    80 00000B3B 0F84F0FEFFFF        <1>     je shellMain
    81 00000B41 80F931              <1>     cmp cl, "1"
    82 00000B44 721C                <1>     jb badChoice
    83 00000B46 80F939              <1>     cmp cl, "9"
    84 00000B49 7717                <1>     ja badChoice
    85 00000B4B 80E930              <1>     sub cl, "0"
    86 00000B4E 390D(28000000)      <1>     cmp dword [dMaxSesIndx], ecx
    87 00000B54 720C                <1>     jb badChoice
    88                              <1> swapScreen:
    89                              <1> ;Enact the swap to the new screen here!
    90                              <1> 
    91                              <1>     
    92                              <1> 
    93                              <1> ;Finish by signalling to DOSMGR that we are done!
    94 00000B56 B800840000          <1>     mov eax, 8400h  ;Release Timeslice and then loop up again!
    95 00000B5B CD2A                <1>     int 2Ah
    96 00000B5D E9C8FEFFFF          <1>     jmp shellEntry  ;Next instruction is a restart!
    97                              <1> 
    98                              <1> badChoice:
    99                              <1> ;Beep at the user and then reset the screen, show display!
   100 00000B62 B207                <1>     mov dl, 07h ;Beep at the user (Do I want to do that?)
   101 00000B64 E84E000000          <1>     call putch
   102 00000B69 E9C3FEFFFF          <1>     jmp shellMain
   103                              <1> resetScreen:
   104                              <1> ;Dirty Hack! Please just send the ANSI code and make the driver recognise
   105                              <1> ; that one ANSI code... Or do a less dirty hack and do what COMMAND.COM does.
   106                              <1> 
   107                              <1> ;Select segment zero which resets current screen w/o affecting frozen state!
   108 00000B6E 31F6                <1>     xor esi, esi    
   109 00000B70 B80C440000          <1>     mov eax, 440Ch
   110 00000B75 B943030000          <1>     mov ecx, 0343h      ;Screen Control/"Restore Segment"
   111 00000B7A CD21                <1>     int 21h
   112                              <1>     return
    13 00000B7C C3                  <2>  ret
   113                              <1> 
   114                              <1> ;Shell handy routines
   115                              <1> getProcName:
   116                              <1> ;Input: rdx -> PSP pointer to find the task name for!
   117                              <1> ;Output: CF=NC: rdx -> Points to ASCIIZ process name
   118                              <1> ;        CF=CY: rdx = 0, Process name not found
   119                              <1> ;
   120                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   121                              <1> ; pass the ptr to the word after.
   122 00000B7D 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   123 00000B81 FA                  <1>     cli
   124 00000B82 51                  <1>     push rcx
   125 00000B83 31C9                <1>     xor ecx, ecx
   126 00000B85 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   127                              <1> .gep0:
   128 00000B8A 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   129 00000B8F 740D                <1>     je short .gep1
   130 00000B91 48FFC2              <1>     inc rdx         ;Go to the next byte
   131 00000B94 FFC9                <1>     dec ecx
   132 00000B96 75F2                <1>     jnz short .gep0
   133                              <1> .gep00:
   134                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   135 00000B98 59                  <1>     pop rcx
   136 00000B99 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   137 00000B9B F9                  <1>     stc     ;Set CF
   138 00000B9C EB17                <1>     jmp short .exit ;Exit reenabling the interrupts!
   139                              <1> .gep1:
   140 00000B9E 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   141 00000BA5 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   142 00000BAA 75EC                <1>     jne .gep00
   143 00000BAC 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word. Should always clear CF
   144 00000BB3 59                  <1>     pop rcx
   145 00000BB4 F8                  <1>     clc     ;Clear CF
   146                              <1> .exit:
   147 00000BB5 FB                  <1>     sti
   148                              <1>     return
    13 00000BB6 C3                  <2>  ret
   149                              <1> putch:
   150 00000BB7 B800020000          <1>     mov eax, 0200h
   151 00000BBC CD21                <1>     int 21h
   152                              <1>     return
    13 00000BBE C3                  <2>  ret
   153                              <1> puts:
   154 00000BBF B800090000          <1>     mov eax, 0900h
   155 00000BC4 CD21                <1>     int 21h
   156                              <1>     return
    13 00000BC6 C3                  <2>  ret
   157                              <1> putNewline:
   158 00000BC7 488D15(4A020000)    <1>     lea rdx, newlineStr
   159 00000BCE E9ECFFFFFF          <1>     jmp puts
   160                              <1> 
   161                              <1> ;------------------------------------------------------------
   162                              <1> ;Default SM Int 22h Handler
   163                              <1> ;------------------------------------------------------------
   164                              <1> ;If this is ever executed, the session will enter a special 
   165                              <1> ; state where the user is prompted to type in the name of
   166                              <1> ; the program to launch in this session. 
   167                              <1> ;For now, it will simply try and relaunch a program.
   168                              <1> ;For for now, it will simply print a string and freeze.
   169                              <1> ;This will never happen as no COMMAND.COM can be exited
   170                              <1> ; with the defaults we have set up.
   171                              <1> i22hHdlr:
   172 00000BD3 488D15(ED010000)    <1>     lea rdx, sesFrozStr
   173 00000BDA B800090000          <1>     mov eax, 0900h
   174 00000BDF CD21                <1>     int 21h
   175                              <1> .lp:
   176 00000BE1 EBFE                <1>     jmp short .lp ;Enter an infinite loop
   177                              <1> 
   178                              <1> i22hShell:
   179                              <1> ;Simply reset the screen and print the info again!
   180 00000BE3 E949FEFFFF          <1>     jmp shellMain
   181                              <1> 
   182                              <1> i23hHdlr:
   183                              <1> ;Default i23 handler, relaunch the shell.
   184                              <1> ;Not doing so will reenter the call on a newline...
   185 00000BE8 F9                  <1>     stc
   186 00000BE9 C20800              <1>     ret 8
   187                              <1> i24hHdlr:
   188 00000BEC B003                <1>     mov al, 3   ;Always FAIL
   189                              <1> interruptExit:  ;Used to overwrite Int 2Eh
   190 00000BEE 48CF                <1>     iretq
   191                              <1> 
    16                                  
    17                                  Segment dseg data private align=16
    18                                  %include "./src/data/smdata.asm"
     1                              <1> 
     2 00000000 434D443D            <1> cmdStr      db "CMD="   ;String to search for in the environment
     3 00000004 413A5C434F4D4D414E- <1> dfltShell   db "A:\COMMAND.COM",0 ;Default session shell string
     3 0000000D 442E434F4D00        <1>
     4 00000013 413A5C444F535C434F- <1> dfltShell2  db "A:\DOS\COMMAND.COM",0    ;Str2 is str1 not present
     4 0000001C 4D4D414E442E434F4D- <1>
     4 00000025 00                  <1>
     5 00000026 0A2F50202F453A3230- <1> cmdTail     db 10, "/P /E:2048",CR   ;Default command tail, ensure an environment!
     5 0000002F 34380D              <1>
     6                              <1> 
     7                              <1> 
     8                              <1> ;Static Error Strings 
     9 00000032 4572726F7220303030- <1> bvStr       db "Error 0001: Invalid DOS Version.",CR,LF,"$"
     9 0000003B 313A20496E76616C69- <1>
     9 00000044 6420444F5320566572- <1>
     9 0000004D 73696F6E2E0D0A24    <1>
    10 00000055 4572726F7220303030- <1> noConStr    db "Error 0002: Invalid Console Driver",CR,LF,"$"
    10 0000005E 323A20496E76616C69- <1>
    10 00000067 6420436F6E736F6C65- <1>
    10 00000070 204472697665720D0A- <1>
    10 00000079 24                  <1>
    11 0000007A 4572726F7220303030- <1> noScreenStr db "Error 0003: Not enough screens",CR,LF,"$"
    11 00000083 333A204E6F7420656E- <1>
    11 0000008C 6F7567682073637265- <1>
    11 00000095 656E730D0A24        <1>
    12 0000009B 4572726F7220303030- <1> noMemStr    db "Error 0004: Not enough memory to start Session Manager",CR,LF,"$"
    12 000000A4 343A204E6F7420656E- <1>
    12 000000AD 6F756768206D656D6F- <1>
    12 000000B6 727920746F20737461- <1>
    12 000000BF 72742053657373696F- <1>
    12 000000C8 6E204D616E61676572- <1>
    12 000000D1 0D0A24              <1>
    13 000000D4 4572726F7220303030- <1> noCmdStr    db "Error 0005: Default command interpreter not found",CR,LF,"$"
    13 000000DD 353A2044656661756C- <1>
    13 000000E6 7420636F6D6D616E64- <1>
    13 000000EF 20696E746572707265- <1>
    13 000000F8 746572206E6F742066- <1>
    13 00000101 6F756E640D0A24      <1>
    14 00000108 4572726F7220303030- <1> noExecStr   db "Error 0006: Unable to start up session",CR,LF,
    14 00000111 363A20556E61626C65- <1>
    14 0000011A 20746F207374617274- <1>
    14 00000123 207570207365737369- <1>
    14 0000012C 6F6E0D0A            <1>
    15 00000130 202020202020202020- <1>             db "            It is recommended you restart your machine...",CR,LF,"$"
    15 00000139 202020497420697320- <1>
    15 00000142 7265636F6D6D656E64- <1>
    15 0000014B 656420796F75207265- <1>
    15 00000154 737461727420796F75- <1>
    15 0000015D 72206D616368696E65- <1>
    15 00000166 2E2E2E0D0A24        <1>
    16 0000016C 4572726F7220303030- <1> noIOCTLStr  db "Error 0007: Generic IOCTL error",CR,LF,"$"
    16 00000175 373A2047656E657269- <1>
    16 0000017E 6320494F43544C2065- <1>
    16 00000187 72726F720D0A24      <1>
    17 0000018E 4572726F7220303030- <1> noStdinStr  db "Error 0008: STDIN Redirected from CON device",CR,LF,"$"
    17 00000197 383A20535444494E20- <1>
    17 000001A0 526564697265637465- <1>
    17 000001A9 642066726F6D20434F- <1>
    17 000001B2 4E206465766963650D- <1>
    17 000001BB 0A24                <1>
    18 000001BD 4572726F7220303030- <1> noStdoutStr db "Error 0009: STDOUT Redirected from CON device",CR,LF,"$"
    18 000001C6 393A205354444F5554- <1>
    18 000001CF 205265646972656374- <1>
    18 000001D8 65642066726F6D2043- <1>
    18 000001E1 4F4E20646576696365- <1>
    18 000001EA 0D0A24              <1>
    19                              <1> 
    20 000001ED 0D0A53657373696F6E- <1> sesFrozStr  db CR,LF,"Session Frozen",CR,LF,"$"
    20 000001F6 2046726F7A656E0D0A- <1>
    20 000001FF 24                  <1>
    21                              <1> 
    22                              <1> ;Here we put the DOSMGR fatal error strings
    23 00000200 0D0A466174616C2045- <1> fatalStr    db CR,LF, "Fatal Error: $"
    23 00000209 72726F723A2024      <1>
    24 00000210 556E696E7465727275- <1> badLockStr  db "Uninterruptable Critical Lock interrupted$"
    24 00000219 707461626C65204372- <1>
    24 00000222 69746963616C204C6F- <1>
    24 0000022B 636B20696E74657272- <1>
    24 00000234 757074656424        <1>
    25 0000023A 0D0A53797374656D20- <1> sysHltStr   db CR,LF,"System Halted$"
    25 00000243 48616C74656424      <1>
    26                              <1> 
    27                              <1> ;Shell Strings
    28 0000024A 0D0A24              <1> newlineStr  db CR,LF,"$"
    29 0000024D 2D2D2D2D2D2D2D2D2D- <1> uline       db 80 dup ("-"),"$"
    29 00000256 2D2D2D2D2D2D2D2D2D- <1>
    29 0000025F 2D2D2D2D2D2D2D2D2D- <1>
    29 00000268 2D2D2D2D2D2D2D2D2D- <1>
    29 00000271 2D2D2D2D2D2D2D2D2D- <1>
    29 0000027A 2D2D2D2D2D2D2D2D2D- <1>
    29 00000283 2D2D2D2D2D2D2D2D2D- <1>
    29 0000028C 2D2D2D2D2D2D2D2D2D- <1>
    29 00000295 2D2D2D2D2D2D2D2D24  <1>
    30 0000029E 202020202020202020- <1> sessStr     db 9 dup (SPC), "Current Sessions", 29 dup (SPC)
    30 000002A7 43757272656E742053- <1>
    30 000002B0 657373696F6E732020- <1>
    30 000002B9 202020202020202020- <1>
    30 000002C2 202020202020202020- <1>
    30 000002CB 202020202020202020  <1>
    31 000002D4 4E756D626572206F66- <1> numSesStr   db "Number of sessions"
    31 000002DD 2073657373696F6E73  <1>
    32 000002E6 3A2024              <1> colonStr    db ": $"
    33                              <1> 
    34 000002E9 456E74657220796F75- <1> promptStr   db "Enter your desired session number...> $"
    34 000002F2 722064657369726564- <1>
    34 000002FB 2073657373696F6E20- <1>
    34 00000304 6E756D6265722E2E2E- <1>
    34 0000030D 3E2024              <1>
    35 00000310 0D0A0A537472696B65- <1> helpStr     db CR,LF,LF,"Strike ? to reset the screen",CR,LF,"$"
    35 00000319 203F20746F20726573- <1>
    35 00000322 657420746865207363- <1>
    35 0000032B 7265656E0D0A24      <1>
    36                              <1> ;Session default process names
    37 00000332 5B576169745D2024    <1> waitStr     db "[Wait] $"
    38 0000033A 5B457869745D2024    <1> deadStr     db "[Exit] $"
    39 00000342 5B52756E5D20205343- <1> sesManStr   db "[Run]  SCP/DOS Session Manager Shell$"
    39 0000034B 502F444F5320536573- <1>
    39 00000354 73696F6E204D616E61- <1>
    39 0000035D 676572205368656C6C- <1>
    39 00000366 24                  <1>
    40 00000367 53455353494F4E2053- <1> noNameStr   db        "SESSION SHELL (COMMAND.COM ?)$"
    40 00000370 48454C4C2028434F4D- <1>
    40 00000379 4D414E442E434F4D20- <1>
    40 00000382 3F2924              <1>
    41 00000385 202020202020202020- <1> ttlStr      db 28 dup (SPC), "SCP/DOS Session Manager",CR,LF,LF,"$"
    41 0000038E 202020202020202020- <1>
    41 00000397 202020202020202020- <1>
    41 000003A0 205343502F444F5320- <1>
    41 000003A9 53657373696F6E204D- <1>
    41 000003B2 616E616765720D0A0A- <1>
    41 000003BB 24                  <1>
    19                                  
    20                                  Segment bseg bss public align=16
    21                                  %include "./src/data/smbss.asm"
     1                              <1> ;Uninitialised data goes here
     2                              <1> 
     3                              <1> ;Write Once variables, ALL SET UP.
     4 00000000 ????????????????    <1> pDosMgrPsp  dq ?    ;Pointer to the DOSMGR PSP
     5 00000008 ????????????????    <1> pDosSda     dq ?    ;Pointer to the DOS SDA
     6 00000010 ????????            <1> dSdaLenMin  dd ?    ;Length of SDA that needs to be swapped if not in DOS.
     7 00000014 ????????            <1> dSdaLen     dd ?    ;Full SDA length
     8 00000018 ????????????????    <1> pPcbTbl     dq ?    ;Ptr to the first PCB SOTH.
     9 00000020 ????????            <1> dPcbLen     dd ?    ;Length of each pcb
    10 00000024 ????????            <1> dMaxTask    dd ?    ;Var version of MAX_TASK
    11 00000028 ????????            <1> dMaxSesIndx dd ?    ;Maximum screen session index! Max Session number = 7.
    12                              <1> 
    13                              <1> ;The below is a temp var until we make a good routine for if the 
    14                              <1> ; top level program of a session exits
    15 0000002C ????????????????    <1> pCmdShell   dq ?    ;Pointer to the command shell to launch
    16                              <1> 
    17                              <1> ;Shell to launch on sessions. 
    18                              <1> ;Read from the CMD= string in the environment or passed by cmd line argument.
    19 00000034 ??????????          <1> inStr       db 5 dup (?)
    20                              <1> ;newShell    db 67 dup (?) 
    21                              <1> 
    22                              <1> ;Dynamic variables below
    23                              <1> 
    24                              <1> ;Screen Session management data
    25 00000039 ??                  <1> bCurScrNum  db ?    ;Contains the current screen number!
    26 0000003A ??                  <1> bScrnIoOk   db ?    ;Set if the screen can be IO'ed to/from! Used by CON!
    27                              <1> 
    28 0000003B ??                  <1> bSM_Req     db ?    ;If set, the byte below indicates the requested screen
    29 0000003C ??                  <1> bSM_Req_Scr db ?    ;Screen number to swap to
    30                              <1> 
    31                              <1> ;Thread management
    32 0000003D ????????            <1> hCurPtda     dd ?    ;Current Thread Handle
    33 00000041 ????????????????    <1> pCurPtda    dq ?    ;Ptr to the current thread ptda.
    34                              <1> 
    35                              <1> ;Supported Critical section locks
    36 00000049 <res Ch>            <1> dosLock     db critLock_size dup (?)    ;Critical section lock
    37 00000055 <res Ch>            <1> drvLock     db critLock_size dup (?)    ;Critical section lock
    38                              <1> 
    39                              <1> ;List pointers
    40 00000061 ????????????????    <1> pObjTblHdr  dq ?    ;Pointer to the first system object table.
    41 00000069 ????????????????    <1> sleepPtr    dq ?    ;Pointer to the head of the sleep list
    42                              <1> 
    43                              <1> scheduleLists:
    44 00000071 <res 2A0h>          <1>     db 32*schedHead_size dup (?)    ;32 schedules, 0-31
    45                              <1> 
    46                              <1> ;BIOS related stuff
    47                              <1> pIDT:
    48 00000311 ????                <1>     .limit  dw ?
    49 00000313 ????????????????    <1>     .base   dq ?
    50                              <1> 
    51                              <1> ;Timer variables
    52 0000031B ??                  <1> bSliceCnt   db ?    ;Number of ticks since last swap
    53 0000031C ??                  <1> bSliceSize  db ?    ;Number of ticks in one "timeslice"
    54 0000031D ??                  <1> bTimerCnt   db ?    ;BIOS timer tracker (when it hits 55ms, do BIOS).
    55 0000031E ????????????????    <1> pOldTimer   dq ?
    22                                  
    23                                  Segment sseg$int bss stack align=16
    24                                  ;This is the interrupt handlers' default stack. Only used during 
    25                                  ; session swaps so it is ok (Interrupts are off).
    26 00000000 <res 100h>                  dq 20h dup (?)   ;32 qword stack is fine for this!
    27                                  Segment sseg$shl bss stack align=16
    28 00000000 <res 1000h>                 dq 200h dup (?)  ;Total 4K stack is fine
    28          ------------------       info: assembly required 1+3+2 passes

